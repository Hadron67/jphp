/* Generated By:JavaCC: Do not edit this line. JZendParserConstants.java */
package com.hadroncfy.jphp.jzend.compile;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JZendParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INLINEHTML = 7;
  /** RegularExpression Id. */
  int ARRAY_IN_STRING = 12;
  /** RegularExpression Id. */
  int PROPERTY_IN_STRING = 13;
  /** RegularExpression Id. */
  int VARIABLE_IN_STRING = 14;
  /** RegularExpression Id. */
  int VARVARIABLE_IN_STRING = 15;
  /** RegularExpression Id. */
  int EXPR_IN_STRING = 16;
  /** RegularExpression Id. */
  int OTHERS_IN_STRING3 = 17;
  /** RegularExpression Id. */
  int PSTRING = 18;
  /** RegularExpression Id. */
  int END_OF_STRING = 19;
  /** RegularExpression Id. */
  int OTHERS_IN_STRING = 20;
  /** RegularExpression Id. */
  int END_OF_STRING2 = 21;
  /** RegularExpression Id. */
  int OTHERS_IN_STRING2 = 22;
  /** RegularExpression Id. */
  int NAME_IN_HEREDOC = 23;
  /** RegularExpression Id. */
  int OTHERS_IN_HEREDOC = 24;
  /** RegularExpression Id. */
  int MEMBERNAME = 28;
  /** RegularExpression Id. */
  int VARIABLE2 = 29;
  /** RegularExpression Id. */
  int DOLLAR2 = 30;
  /** RegularExpression Id. */
  int LBBRACKET2 = 31;
  /** RegularExpression Id. */
  int DOUBLE_QUOTES = 37;
  /** RegularExpression Id. */
  int SINGLE_QUOTES = 38;
  /** RegularExpression Id. */
  int BACK_QUOTES = 39;
  /** RegularExpression Id. */
  int BEGIN_OF_SSTRING = 40;
  /** RegularExpression Id. */
  int BEGIN_OF_DSTRING = 41;
  /** RegularExpression Id. */
  int EOS = 42;
  /** RegularExpression Id. */
  int HEREDOC_ENTRY = 43;
  /** RegularExpression Id. */
  int EAR = 44;
  /** RegularExpression Id. */
  int EOL = 45;
  /** RegularExpression Id. */
  int CAMMA = 46;
  /** RegularExpression Id. */
  int SLICE = 47;
  /** RegularExpression Id. */
  int PLUS = 48;
  /** RegularExpression Id. */
  int MINUS = 49;
  /** RegularExpression Id. */
  int INC = 50;
  /** RegularExpression Id. */
  int DEC = 51;
  /** RegularExpression Id. */
  int TIMES = 52;
  /** RegularExpression Id. */
  int DIVIDE = 53;
  /** RegularExpression Id. */
  int CONCAT = 54;
  /** RegularExpression Id. */
  int MOD = 55;
  /** RegularExpression Id. */
  int ASSIGN = 56;
  /** RegularExpression Id. */
  int ASSIGNPLUS = 57;
  /** RegularExpression Id. */
  int ASSIGNMINUS = 58;
  /** RegularExpression Id. */
  int ASSIGNTIMES = 59;
  /** RegularExpression Id. */
  int ASSIGNDIVIDE = 60;
  /** RegularExpression Id. */
  int ASSIGNMOD = 61;
  /** RegularExpression Id. */
  int ASSIGNCONCAT = 62;
  /** RegularExpression Id. */
  int ASSIGNBITAND = 63;
  /** RegularExpression Id. */
  int ASSIGNBITOR = 64;
  /** RegularExpression Id. */
  int ASSIGNBITXOR = 65;
  /** RegularExpression Id. */
  int ASSIGNLSHIFT = 66;
  /** RegularExpression Id. */
  int ASSIGNRSHIFT = 67;
  /** RegularExpression Id. */
  int MT = 68;
  /** RegularExpression Id. */
  int LT = 69;
  /** RegularExpression Id. */
  int MTOE = 70;
  /** RegularExpression Id. */
  int LTOE = 71;
  /** RegularExpression Id. */
  int EQU = 72;
  /** RegularExpression Id. */
  int NEQU = 73;
  /** RegularExpression Id. */
  int IDENTICAL = 74;
  /** RegularExpression Id. */
  int NIDENTICAL = 75;
  /** RegularExpression Id. */
  int AND = 76;
  /** RegularExpression Id. */
  int OR = 77;
  /** RegularExpression Id. */
  int XOR = 78;
  /** RegularExpression Id. */
  int NOT = 79;
  /** RegularExpression Id. */
  int BITAND = 80;
  /** RegularExpression Id. */
  int BITOR = 81;
  /** RegularExpression Id. */
  int BITXOR = 82;
  /** RegularExpression Id. */
  int BITNOT = 83;
  /** RegularExpression Id. */
  int LSHIFT = 84;
  /** RegularExpression Id. */
  int RSHIFT = 85;
  /** RegularExpression Id. */
  int LBRACKET = 86;
  /** RegularExpression Id. */
  int RBRACKET = 87;
  /** RegularExpression Id. */
  int LCBRACKET = 88;
  /** RegularExpression Id. */
  int RCBRACKET = 89;
  /** RegularExpression Id. */
  int LBBRACKET = 90;
  /** RegularExpression Id. */
  int RBBRACKET = 91;
  /** RegularExpression Id. */
  int ARROW = 92;
  /** RegularExpression Id. */
  int DOUBLESLICE = 93;
  /** RegularExpression Id. */
  int DOUBLEARROW = 94;
  /** RegularExpression Id. */
  int INSTANCEOF = 95;
  /** RegularExpression Id. */
  int NSSEPERATOR = 96;
  /** RegularExpression Id. */
  int INT = 97;
  /** RegularExpression Id. */
  int FLOAT = 98;
  /** RegularExpression Id. */
  int STRING = 99;
  /** RegularExpression Id. */
  int ARRAY = 100;
  /** RegularExpression Id. */
  int OBJECT = 101;
  /** RegularExpression Id. */
  int BOOL = 102;
  /** RegularExpression Id. */
  int UNSET = 103;
  /** RegularExpression Id. */
  int ECHO = 104;
  /** RegularExpression Id. */
  int CONST = 105;
  /** RegularExpression Id. */
  int GOTO = 106;
  /** RegularExpression Id. */
  int IF = 107;
  /** RegularExpression Id. */
  int ELSEIF = 108;
  /** RegularExpression Id. */
  int ELSE = 109;
  /** RegularExpression Id. */
  int ENDIF = 110;
  /** RegularExpression Id. */
  int WHILE = 111;
  /** RegularExpression Id. */
  int DO = 112;
  /** RegularExpression Id. */
  int ENDWHILE = 113;
  /** RegularExpression Id. */
  int FOR = 114;
  /** RegularExpression Id. */
  int ENDFOR = 115;
  /** RegularExpression Id. */
  int FOREACH = 116;
  /** RegularExpression Id. */
  int ENDFOREACH = 117;
  /** RegularExpression Id. */
  int SWITCH = 118;
  /** RegularExpression Id. */
  int CASE = 119;
  /** RegularExpression Id. */
  int DEFAULTL = 120;
  /** RegularExpression Id. */
  int BREAK = 121;
  /** RegularExpression Id. */
  int CONTINUE = 122;
  /** RegularExpression Id. */
  int ENDSWITCH = 123;
  /** RegularExpression Id. */
  int EMPTY = 124;
  /** RegularExpression Id. */
  int INCLUDE = 125;
  /** RegularExpression Id. */
  int INCLUDE_ONCE = 126;
  /** RegularExpression Id. */
  int REQUIRE = 127;
  /** RegularExpression Id. */
  int REQUIRE_ONCE = 128;
  /** RegularExpression Id. */
  int EVAL = 129;
  /** RegularExpression Id. */
  int ISSET = 130;
  /** RegularExpression Id. */
  int AS = 131;
  /** RegularExpression Id. */
  int STATIC = 132;
  /** RegularExpression Id. */
  int GLOBAL = 133;
  /** RegularExpression Id. */
  int NEW = 134;
  /** RegularExpression Id. */
  int CLONE = 135;
  /** RegularExpression Id. */
  int FUNCTION = 136;
  /** RegularExpression Id. */
  int USE = 137;
  /** RegularExpression Id. */
  int CALLABLE = 138;
  /** RegularExpression Id. */
  int RETURN = 139;
  /** RegularExpression Id. */
  int SILENT = 140;
  /** RegularExpression Id. */
  int PRINT = 141;
  /** RegularExpression Id. */
  int LIST = 142;
  /** RegularExpression Id. */
  int EXIT = 143;
  /** RegularExpression Id. */
  int THROW = 144;
  /** RegularExpression Id. */
  int NAMESPACE = 145;
  /** RegularExpression Id. */
  int HALT_COMPILER = 146;
  /** RegularExpression Id. */
  int TRY = 147;
  /** RegularExpression Id. */
  int CATCH = 148;
  /** RegularExpression Id. */
  int VAR = 149;
  /** RegularExpression Id. */
  int CLASS = 150;
  /** RegularExpression Id. */
  int EXTENDS = 151;
  /** RegularExpression Id. */
  int INTERFACE = 152;
  /** RegularExpression Id. */
  int IMPLEMENTS = 153;
  /** RegularExpression Id. */
  int FINAL = 154;
  /** RegularExpression Id. */
  int ABSTRACT = 155;
  /** RegularExpression Id. */
  int TRAIT = 156;
  /** RegularExpression Id. */
  int PUBLIC = 157;
  /** RegularExpression Id. */
  int PROTECTED = 158;
  /** RegularExpression Id. */
  int PRIVATE = 159;
  /** RegularExpression Id. */
  int INSTEADOF = 160;
  /** RegularExpression Id. */
  int DECLARE = 161;
  /** RegularExpression Id. */
  int ENDDECLARE = 162;
  /** RegularExpression Id. */
  int CLASS_C = 163;
  /** RegularExpression Id. */
  int TRAIT_C = 164;
  /** RegularExpression Id. */
  int FUNCTION_C = 165;
  /** RegularExpression Id. */
  int METHOD_C = 166;
  /** RegularExpression Id. */
  int LINE_C = 167;
  /** RegularExpression Id. */
  int FILE_C = 168;
  /** RegularExpression Id. */
  int DIR_C = 169;
  /** RegularExpression Id. */
  int NAMESPACE_C = 170;
  /** RegularExpression Id. */
  int IDENTIFIER = 171;
  /** RegularExpression Id. */
  int VARIABLE = 172;
  /** RegularExpression Id. */
  int DOLLAR = 173;
  /** RegularExpression Id. */
  int NAME = 174;
  /** RegularExpression Id. */
  int LETTER = 175;
  /** RegularExpression Id. */
  int DIGIT = 176;
  /** RegularExpression Id. */
  int NOMBRE = 177;

  /** Lexical state. */
  int IN_SCRIPTING = 0;
  /** Lexical state. */
  int DEFAULT = 1;
  /** Lexical state. */
  int IN_LINECOMMENT = 2;
  /** Lexical state. */
  int IN_BLOCKCOMMENT = 3;
  /** Lexical state. */
  int IN_DOUBLE_QUOTES = 4;
  /** Lexical state. */
  int IN_BACK_QUOTES = 5;
  /** Lexical state. */
  int IN_HEREDOC = 6;
  /** Lexical state. */
  int IN_SINGLE_QUOTES = 7;
  /** Lexical state. */
  int LOOKING_FOR_PROPERTY = 8;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "\" \"",
    "\"<?php\"",
    "<INLINEHTML>",
    "<token of kind 8>",
    "\"?>\"",
    "\"*/\"",
    "<token of kind 11>",
    "<ARRAY_IN_STRING>",
    "<PROPERTY_IN_STRING>",
    "<VARIABLE_IN_STRING>",
    "\"${\"",
    "\"{$\"",
    "<OTHERS_IN_STRING3>",
    "<PSTRING>",
    "<END_OF_STRING>",
    "<OTHERS_IN_STRING>",
    "<END_OF_STRING2>",
    "<OTHERS_IN_STRING2>",
    "<NAME_IN_HEREDOC>",
    "<OTHERS_IN_HEREDOC>",
    "<token of kind 25>",
    "<token of kind 26>",
    "<token of kind 27>",
    "<MEMBERNAME>",
    "<VARIABLE2>",
    "\"$\"",
    "\"{\"",
    "<token of kind 32>",
    "<token of kind 33>",
    "<token of kind 34>",
    "\"/*\"",
    "<token of kind 36>",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"`\"",
    "<BEGIN_OF_SSTRING>",
    "<BEGIN_OF_DSTRING>",
    "\"?>\"",
    "\"<<<\"",
    "\"?\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"++\"",
    "\"--\"",
    "\"*\"",
    "\"/\"",
    "\".\"",
    "\"%\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\".=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"===\"",
    "<NIDENTICAL>",
    "<AND>",
    "<OR>",
    "\"xor\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"<<\"",
    "\">>\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"->\"",
    "\"::\"",
    "\"=>\"",
    "\"instanceof\"",
    "\"\\\\\"",
    "<INT>",
    "<FLOAT>",
    "<STRING>",
    "\"array\"",
    "\"object\"",
    "<BOOL>",
    "\"unset\"",
    "\"echo\"",
    "\"const\"",
    "\"goto\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"endif\"",
    "\"while\"",
    "\"do\"",
    "\"endwhile\"",
    "\"for\"",
    "\"endfor\"",
    "\"foreach\"",
    "\"endforeach\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"continue\"",
    "\"endswitch\"",
    "\"empty\"",
    "\"include\"",
    "\"include_once\"",
    "\"require\"",
    "\"require_once\"",
    "\"eval\"",
    "\"isset\"",
    "\"as\"",
    "\"static\"",
    "\"global\"",
    "\"new\"",
    "\"clone\"",
    "\"function\"",
    "\"use\"",
    "\"callable\"",
    "\"return\"",
    "\"@\"",
    "\"print\"",
    "\"list\"",
    "<EXIT>",
    "\"throw\"",
    "\"namespace\"",
    "\"__halt_compiler\"",
    "\"try\"",
    "\"catch\"",
    "\"var\"",
    "\"class\"",
    "\"extends\"",
    "\"interface\"",
    "\"implements\"",
    "\"final\"",
    "\"abstract\"",
    "\"trait\"",
    "\"public\"",
    "\"protected\"",
    "\"private\"",
    "\"insteadof\"",
    "\"declare\"",
    "\"enddeclare\"",
    "\"__CLASS__\"",
    "\"__TRAIT\"",
    "\"__FUNCTION__\"",
    "\"__METHOD__\"",
    "\"__LINE__\"",
    "\"__FILE\"",
    "\"__DIR__\"",
    "\"__NAMESPACE__\"",
    "<IDENTIFIER>",
    "<VARIABLE>",
    "\"$\"",
    "<NAME>",
    "<LETTER>",
    "<DIGIT>",
    "<NOMBRE>",
  };

}
