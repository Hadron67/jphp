/* Generated By:JavaCC: Do not edit this line. JZendParserTokenManager.java */
package com.hadroncfy.jphp.jzend.compile;
import java.util.Stack;

/** Token Manager. */
public class JZendParserTokenManager implements JZendParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 17;
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 17;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_6(0x8000L);
      case 123:
         return jjMoveStringLiteralDfa1_6(0x10000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 123:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffefffffffffL & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 36)
                     jjAddStates(0, 2);
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0xffffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 6:
                  if (curChar == 36)
                     jjAddStates(0, 2);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 12:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(17);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 15);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(2);
                  }
                  else if ((0xf000000178000001L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0xf000000178000001L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 91 && kind > 12)
                     kind = 12;
                  break;
               case 10:
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 15);
                  break;
               case 13:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(14);
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 17;
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 17;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_5(0x8000L);
      case 123:
         return jjMoveStringLiteralDfa1_5(0x10000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 123:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 26)
                     kind = 26;
                  if ((0xffffffefffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 36)
                     jjAddStates(0, 2);
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 2:
                  if ((0xffffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (kind > 26)
                     kind = 26;
                  break;
               case 6:
                  if (curChar == 36)
                     jjAddStates(0, 2);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(5, 6);
                  break;
               case 12:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(17);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 15);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(4, 19);
                  if ((0xf7fffffeffffffffL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 96)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 1:
                  if (curChar == 96 && kind > 21)
                     kind = 21;
                  break;
               case 2:
                  if ((0xf7fffffeffffffffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 92)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 91 && kind > 12)
                     kind = 12;
                  break;
               case 10:
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 15);
                  break;
               case 13:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(14);
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(4, 19);
                  break;
               case 19:
                  if (kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 2:
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa2_1(active0, 0x40L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x40L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0x40L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 112:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(4, 6);
         break;
      default :
         return 5;
   }
   return 5;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 171;
            return 33;
         }
         if ((active1 & 0x101000000000000L) != 0L || (active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 171;
            return 65;
         }
         if ((active1 & 0x14000000000000L) != 0L || (active2 & 0x4000100L) != 0L)
         {
            jjmatchedKind = 171;
            return 27;
         }
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 171;
            return 18;
         }
         if ((active0 & 0x1020000800000000L) != 0L)
            return 0;
         if ((active0 & 0x4040000000000000L) != 0L)
            return 45;
         if ((active1 & 0x20001L) != 0L)
            return 16;
         if ((active1 & 0x1000000000L) != 0L || (active2 & 0x8000008L) != 0L)
         {
            jjmatchedKind = 171;
            return 14;
         }
         if ((active1 & 0x182a710000000000L) != 0L || (active2 & 0x400800002L) != 0L)
         {
            jjmatchedKind = 171;
            return 37;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x1000a4L) != 0L)
            return 9;
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 171;
            return 73;
         }
         if ((active2 & 0x200000000000L) != 0L)
            return 42;
         if ((active1 & 0x8200L) != 0L)
            return 7;
         if ((active1 & 0x480868000004000L) != 0L || (active2 & 0x7f8f07f66e0L) != 0L)
         {
            jjmatchedKind = 171;
            return 40;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 11;
         if ((active1 & 0x6000080080000000L) != 0L || (active2 & 0x103000004L) != 0L)
         {
            jjmatchedKind = 171;
            return 53;
         }
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x801L) != 0L)
         {
            jjmatchedKind = 171;
            return 22;
         }
         return -1;
      case 1:
         if ((active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x801L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 1;
            }
            return 21;
         }
         if ((active1 & 0x200L) != 0L)
            return 6;
         if ((active1 & 0x6000000080000000L) != 0L || (active2 & 0x101000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active1 & 0x1ffef7b000004000L) != 0L || (active2 & 0x7fefe7f67e6L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active1 & 0x1000000000000L) != 0L)
            return 64;
         if ((active1 & 0x80000000000L) != 0L || (active2 & 0x8L) != 0L)
            return 40;
         if ((active2 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 1;
            }
            return 36;
         }
         return -1;
      case 2:
         if ((active2 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 2;
            }
            return 57;
         }
         if ((active1 & 0x14000000004000L) != 0L || (active2 & 0x280240L) != 0L)
            return 40;
         if ((active1 & 0xffeaf7b080000000L) != 0L || (active2 & 0x7fffed76db7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 2;
            }
            return 40;
         }
         return -1;
      case 3:
         if ((active1 & 0xff7ac2b080000000L) != 0L || (active2 & 0x7fffed72db5L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 3;
            }
            return 40;
         }
         if ((active2 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 3;
            }
            return 56;
         }
         if ((active1 & 0x80350000000000L) != 0L || (active2 & 0x4002L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active1 & 0xed7a102080000000L) != 0L || (active2 & 0x7ffeb860d31L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 4;
            return 40;
         }
         if ((active1 & 0x1200c29000000000L) != 0L || (active2 & 0x14512084L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active1 & 0xed12000080000000L) != 0L || (active2 & 0x6ffcb860501L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 5;
            }
            return 40;
         }
         if ((active1 & 0x68102000000000L) != 0L || (active2 & 0x10020000830L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active1 & 0xe110000000000000L) != 0L || (active2 & 0x21280800001L) != 0L)
            return 40;
         if ((active1 & 0xc22000080000000L) != 0L || (active2 & 0x4ed4b060500L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 171;
               jjmatchedPos = 6;
            }
            return 40;
         }
         return -1;
      case 7:
         if ((active1 & 0x4820000080000000L) != 0L || (active2 & 0x46d43060001L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active1 & 0x402000000000000L) != 0L || (active2 & 0x8008000500L) != 0L)
            return 40;
         return -1;
      case 8:
         if ((active1 & 0x4020000080000000L) != 0L || (active2 & 0x46402040001L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active1 & 0x800000000000000L) != 0L || (active2 & 0x941020000L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active1 & 0x20000080000000L) != 0L || (active2 & 0x4402000000L) != 0L)
            return 40;
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x42000040001L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 9;
            return 40;
         }
         return -1;
      case 10:
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x42000040001L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      case 11:
         if ((active2 & 0x40000040000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 11;
            return 40;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x2000000001L) != 0L)
            return 40;
         return -1;
      case 12:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 12;
            return 40;
         }
         if ((active2 & 0x40000000000L) != 0L)
            return 40;
         return -1;
      case 13:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 13;
            return 40;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L);
      case 33:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 36:
         return jjStartNfaWithStates_0(0, 173, 42);
      case 37:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x204000000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 46);
      case 45:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x408000000000000L, 0x10000000L, 0x0L);
      case 46:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x1000000800000000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 45);
      case 60:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x100084L, 0x0L);
      case 61:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000500L, 0x0L);
      case 62:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200048L, 0x0L);
      case 63:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 140);
      case 91:
         return jjStopAtPos(0, 88);
      case 92:
         return jjStopAtPos(0, 96);
      case 93:
         return jjStopAtPos(0, 89);
      case 94:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7f800040000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x8000008L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x480020000000000L, 0x500480L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x101000000000000L, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x182a710000000000L, 0x400800002L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14000000000000L, 0x4000100L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000080080000000L, 0x103000004L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20040L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe0002000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x801L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10090000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x200L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 90);
      case 124:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 125:
         return jjStopAtPos(0, 91);
      case 126:
         return jjStopAtPos(0, 83);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 42:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      case 43:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 45:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 58:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         break;
      case 60:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x4L, active2, 0L);
      case 61:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x7f800040000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000000L, active2, 0x320400L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8100000000000000L, active2, 0x200000841L);
      case 102:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 107, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L, active2, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4004000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300000000000L, active2, 0x4000a0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x682a408080000000L, active2, 0x501000000L);
      case 111:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 112, 64);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x414060000004000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200001000000000L, active2, 0xd0082000L);
      case 115:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 131, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x204L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000100L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 43);
         break;
      case 61:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         break;
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x12000000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10400012L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000000000000000L, active2, 0x200000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x82a400000000000L, active2, 0x400000000L);
      case 101:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 137, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40800000000000L, active2, 0x80002000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400020000000000L, active2, 0x4000100L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000a0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x2000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 40);
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10001000000000L, active2, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80308080000000L, active2, 0x108004004L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0x1900800L);
      case 119:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 40);
         break;
      case 121:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 147, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x40000000000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x38000000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x800000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x1000000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active1, 0x300001000000000L, active2, 0x4040000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x100100L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x400000000L);
      case 101:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 40);
         return jjMoveStringLiteralDfa4_0(active1, 0x1010a000000000L, active2, 0x1820004L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active1, 0x28000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active1, 0x400000000000L, active2, 0x10000000L);
      case 108:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 40);
         return jjMoveStringLiteralDfa4_0(active1, 0x6000800000000000L, active2, 0x222000400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x2080L);
      case 111:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 40);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 40);
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active1, 0x800020000000000L, active2, 0x400000L);
      case 116:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 40);
         return jjMoveStringLiteralDfa4_0(active1, 0x1440000080000000L, active2, 0x148000010L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active1, 0x8000000000000000L, active2, 0x801L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active1, 0L, active2, 0x80000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active1, 0x2000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x1800000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x10000000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x40000000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0xa000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x20000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x10000080000000L, active2, 0x280000420L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0x40002000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 40);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 40);
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x542000000L);
      case 102:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 40);
         break;
      case 104:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 40);
         return jjMoveStringLiteralDfa5_0(active1, 0x2000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x8400100000000000L, active2, 0x20000011L);
      case 107:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 40);
         break;
      case 108:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 40);
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x28000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x9000800L);
      case 115:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 40);
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x20000L);
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 40);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 40);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 40);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 40);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 40);
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active1, 0x6100000000000000L, active2, 0L);
      case 119:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 144, 40);
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 40);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x2000000000L);
      case 69:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 168, 40);
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x48000000000L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x1000000000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x800000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x20000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x108000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x400L);
      case 99:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 40);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 40);
         return jjMoveStringLiteralDfa6_0(active1, 0x10000000000000L, active2, 0x440000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active1, 0x6000000000000000L, active2, 0x800000L);
      case 102:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 40);
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x1000000L);
      case 104:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 118, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x802000000000000L, active2, 0x100L);
      case 108:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 133, 40);
         return jjMoveStringLiteralDfa6_0(active1, 0x100000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x2000000L);
      case 110:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 139, 40);
         return jjMoveStringLiteralDfa6_0(active1, 0x400000080000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x20000L);
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x8020000000000000L, active2, 0x200000001L);
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 40);
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x80040000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x40800000000L);
      case 84:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 40);
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x2000000000L);
      case 95:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 169, 40);
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x8000040000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x1020000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active1, 0x80000000L, active2, 0x8000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x100000000L);
      case 101:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 40);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 161, 40);
         return jjMoveStringLiteralDfa7_0(active1, 0x4020000000000000L, active2, 0x2000001L);
      case 104:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 40);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000000000L, active2, 0x400000400L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x100L);
      case 115:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 151, 40);
         break;
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 40);
         return jjMoveStringLiteralDfa7_0(active1, 0x800000000000000L, active2, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x2000000000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x40000000000L);
      case 95:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 167, 40);
         return jjMoveStringLiteralDfa8_0(active1, 0x4000000000000000L, active2, 0x800000001L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x20000000000000L, active2, 0x400000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x800000000000000L, active2, 0x1060000L);
      case 101:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 40);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 122, 40);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 138, 40);
         return jjMoveStringLiteralDfa8_0(active1, 0x80000000L, active2, 0x40000000L);
      case 110:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 136, 40);
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x100000000L);
      case 116:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 155, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x40000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x2000000000L);
      case 95:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 163, 40);
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 158, 40);
         break;
      case 101:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 145, 40);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 152, 40);
         break;
      case 102:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 160, 40);
         break;
      case 104:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 40);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000080000000L, active2, 0x40001L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40000000000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x2000000000L);
      case 95:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 166, 40);
         break;
      case 101:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 162, 40);
         break;
      case 102:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 40);
         break;
      case 104:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 117, 40);
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000000L, active2, 0x1L);
      case 115:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 153, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x40000000000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000000L, active2, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 165, 40);
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x40000000000L);
      case 101:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 126, 40);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 128, 40);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 170, 40);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa14_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 146, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 83;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 177)
                        kind = 177;
                     jjCheckNAddStates(7, 10);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(45);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 34)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 0:
                  if (curChar == 47 && kind > 34)
                     kind = 34;
                  break;
               case 2:
                  if (curChar == 35)
                     kind = 34;
                  break;
               case 3:
                  if (curChar == 39)
                     kind = 36;
                  break;
               case 4:
                  if (curChar == 34)
                     kind = 40;
                  break;
               case 6:
                  if (curChar == 61 && kind > 75)
                     kind = 75;
                  break;
               case 7:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 62)
                     kind = 75;
                  break;
               case 10:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 38 && kind > 76)
                     kind = 76;
                  break;
               case 12:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 41:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddStates(7, 10);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar != 46)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 57;
                  if (curChar == 116)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 96)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 98)
                     jjAddStates(11, 13);
                  else if (curChar == 100)
                     jjAddStates(14, 15);
                  else if (curChar == 105)
                     jjAddStates(16, 17);
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 171)
                        kind = 171;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 5:
                  if (curChar == 96)
                     kind = 41;
                  break;
               case 13:
                  if (curChar == 100 && kind > 76)
                     kind = 76;
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 124 && kind > 77)
                     kind = 77;
                  break;
               case 17:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 108 && kind > 98)
                     kind = 98;
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116 && kind > 98)
                     kind = 98;
                  break;
               case 25:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 103 && kind > 99)
                     kind = 99;
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 116 && kind > 143)
                     kind = 143;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 171)
                     kind = 171;
                  jjCheckNAdd(40);
                  break;
               case 42:
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  jjCheckNAdd(43);
                  break;
               case 51:
                  if (curChar == 105)
                     jjAddStates(16, 17);
                  break;
               case 54:
                  if (curChar == 114 && kind > 97)
                     kind = 97;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 100)
                     jjAddStates(14, 15);
                  break;
               case 61:
                  if (curChar == 101 && kind > 98)
                     kind = 98;
                  break;
               case 62:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if (curChar == 101 && kind > 143)
                     kind = 143;
                  break;
               case 67:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 98)
                     jjAddStates(11, 13);
                  break;
               case 69:
                  if (curChar == 121 && kind > 99)
                     kind = 99;
                  break;
               case 70:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if (curChar == 108 && kind > 102)
                     kind = 102;
                  break;
               case 75:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 110 && kind > 102)
                     kind = 102;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 83 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 10)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 17;
            return -1;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 17;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_4(0x8000L);
      case 123:
         return jjMoveStringLiteralDfa1_4(0x10000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 123:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffebffffffffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 36)
                     jjAddStates(18, 20);
                  else if (curChar == 34)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 36)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 1:
                  if (curChar == 34 && kind > 19)
                     kind = 19;
                  break;
               case 2:
                  if ((0xffffffebffffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if (curChar == 36)
                     jjAddStates(18, 20);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 11:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(16);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 14);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 2:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 91 && kind > 12)
                     kind = 12;
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 14);
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(13);
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 36:
         return jjStartNfaWithStates_8(0, 30, 6);
      case 123:
         return jjStopAtPos(0, 31);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002400L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 27)
                     kind = 27;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 34)
                     kind = 32;
                  break;
               case 9:
                  if (curChar == 39)
                     kind = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(4);
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 26)
                     kind = 26;
                  if (curChar == 39)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  break;
               case 2:
                  if (kind > 25)
                     kind = 25;
                  break;
               case 3:
                  if (kind > 26)
                     kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 25)
                     kind = 25;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   7, 10, 16, 8, 9, 11, 15, 47, 48, 50, 44, 73, 76, 82, 65, 67, 
   53, 59, 6, 9, 15, 7, 8, 10, 14, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\44\173", "\173\44", null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\44", "\173", null, null, null, null, null, null, 
null, null, null, null, "\77\76", "\74\74\74", "\77", "\73", "\54", "\72", "\53", 
"\55", "\53\53", "\55\55", "\52", "\57", "\56", "\45", "\75", "\53\75", "\55\75", 
"\52\75", "\57\75", "\45\75", "\56\75", "\46\75", "\174\75", "\136\75", "\74\74\75", 
"\76\76\75", "\76", "\74", "\76\75", "\74\75", "\75\75", "\41\75", "\75\75\75", null, null, 
null, "\170\157\162", "\41", "\46", "\174", "\136", "\176", "\74\74", "\76\76", 
"\50", "\51", "\133", "\135", "\173", "\175", "\55\76", "\72\72", "\75\76", 
"\151\156\163\164\141\156\143\145\157\146", "\134", null, null, null, "\141\162\162\141\171", "\157\142\152\145\143\164", 
null, "\165\156\163\145\164", "\145\143\150\157", "\143\157\156\163\164", 
"\147\157\164\157", "\151\146", "\145\154\163\145\151\146", "\145\154\163\145", 
"\145\156\144\151\146", "\167\150\151\154\145", "\144\157", "\145\156\144\167\150\151\154\145", 
"\146\157\162", "\145\156\144\146\157\162", "\146\157\162\145\141\143\150", 
"\145\156\144\146\157\162\145\141\143\150", "\163\167\151\164\143\150", "\143\141\163\145", 
"\144\145\146\141\165\154\164", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\145\156\144\163\167\151\164\143\150", "\145\155\160\164\171", "\151\156\143\154\165\144\145", 
"\151\156\143\154\165\144\145\137\157\156\143\145", "\162\145\161\165\151\162\145", 
"\162\145\161\165\151\162\145\137\157\156\143\145", "\145\166\141\154", "\151\163\163\145\164", "\141\163", 
"\163\164\141\164\151\143", "\147\154\157\142\141\154", "\156\145\167", "\143\154\157\156\145", 
"\146\165\156\143\164\151\157\156", "\165\163\145", "\143\141\154\154\141\142\154\145", 
"\162\145\164\165\162\156", "\100", "\160\162\151\156\164", "\154\151\163\164", null, 
"\164\150\162\157\167", "\156\141\155\145\163\160\141\143\145", 
"\137\137\150\141\154\164\137\143\157\155\160\151\154\145\162", "\164\162\171", "\143\141\164\143\150", "\166\141\162", 
"\143\154\141\163\163", "\145\170\164\145\156\144\163", "\151\156\164\145\162\146\141\143\145", 
"\151\155\160\154\145\155\145\156\164\163", "\146\151\156\141\154", "\141\142\163\164\162\141\143\164", 
"\164\162\141\151\164", "\160\165\142\154\151\143", "\160\162\157\164\145\143\164\145\144", 
"\160\162\151\166\141\164\145", "\151\156\163\164\145\141\144\157\146", "\144\145\143\154\141\162\145", 
"\145\156\144\144\145\143\154\141\162\145", "\137\137\103\114\101\123\123\137\137", "\137\137\124\122\101\111\124", 
"\137\137\106\125\116\103\124\111\117\116\137\137", "\137\137\115\105\124\110\117\104\137\137", 
"\137\137\114\111\116\105\137\137", "\137\137\106\111\114\105", "\137\137\104\111\122\137\137", 
"\137\137\116\101\115\105\123\120\101\103\105\137\137", null, null, "\44", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "IN_SCRIPTING",
   "DEFAULT",
   "IN_LINECOMMENT",
   "IN_BLOCKCOMMENT",
   "IN_DOUBLE_QUOTES",
   "IN_BACK_QUOTES",
   "IN_HEREDOC",
   "IN_SINGLE_QUOTES",
   "LOOKING_FOR_PROPERTY",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 0, -1, 0, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, 
   -1, -1, -1, 0, 0, 0, 0, 4, 7, 2, 3, 7, -1, -1, -1, 4, 5, 1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffff00f1fff081L, 0xffffffffffffffffL, 0x23fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1f0800077eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1f08000740L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x6000800L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[83];
private final int[] jjstateSet = new int[166];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JZendParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JZendParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 83; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         matchedToken.image = image.deleteCharAt(0).deleteCharAt(image.length() - 1).toString();
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                          matchedToken.image = image.deleteCharAt(0).toString();
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       matchedToken.kind = OTHERS_IN_STRING;
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  matchedToken.image = image.deleteCharAt(image.length() - 1).toString();
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        matchedToken.kind = END_OF_STRING;
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       matchedToken.kind = END_OF_STRING;
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        matchedToken.kind = OTHERS_IN_STRING;
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         matchedToken.kind = OTHERS_IN_STRING;
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                 matchedToken.image = image.deleteCharAt(0).toString();matchedToken.kind = VARIABLE;
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                       matchedToken.kind = DOLLAR;
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                           matchedToken.kind = LBBRACKET;
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            matchedToken.kind = BEGIN_OF_SSTRING;
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                    matchedToken.kind = EOL;
         break;
      case 172 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                matchedToken.image = image.deleteCharAt(0).toString();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
