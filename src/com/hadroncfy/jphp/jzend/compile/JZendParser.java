/* Generated By:JavaCC: Do not edit this line. JZendParser.java */
package com.hadroncfy.jphp.jzend.compile;

import java.util.Stack;


class JZendParser implements LineGetter, JZendParserConstants {
    private JZendCompiler cp = null;
    private int[] state_stack = new int[10];
    private int sp = 0;
    private boolean in_string = false;
    private Stack<ZNode> node_stack = new Stack<ZNode>();
    public enum BinaryOptrPriorities{
        OR,
        AND,
        XOR,
        BITOR,
        BITAND,
        BITXOR,
        CONCAT,
        EQU,
        MT,
        SHIFT,
        PLUS,
        TIMES,
        MOD
    }
    public void Parse() throws TokenMgrError,ParseException,CompilationException{
        this.TopStatementList();
    }
    public void setCompiler(JZendCompiler c){
        this.cp = c;
    }
    private void PushState(int t){
        token_source.SwitchTo(t);
        state_stack[sp++] = t;
    }
    private void PopState(){
        token_source.SwitchTo(state_stack[--sp]);
    }
    private boolean IsEmpty(){
        return sp == 0;
    }
    private void SwitchTo(int a){
        token_source.SwitchTo(a);
    }
    private void P(ZNode n){
        node_stack.push(n);
    }
    private ZNode $(){
        return node_stack.pop();
    }
    private ZNode $(int i){
        return node_stack.get(node_stack.size() - i - 1);
    }
    public int getLine(){
        return token.beginLine;
    }
    public int getColumn(){
        return token.beginColumn;
    }
    protected static int getBinaryOptrPriority(int t){
        switch(t){
            case OR: return BinaryOptrPriorities.OR.ordinal();
            case AND: return BinaryOptrPriorities.AND.ordinal();
            case XOR: return BinaryOptrPriorities.XOR.ordinal();
            case BITOR: return BinaryOptrPriorities.BITOR.ordinal();
            case BITAND: return BinaryOptrPriorities.BITAND.ordinal();
            case BITXOR: return BinaryOptrPriorities.BITXOR.ordinal();
            case CONCAT: return BinaryOptrPriorities.CONCAT.ordinal();
            case MT:
            case LT:
            case MTOE:
            case LTOE: return BinaryOptrPriorities.MT.ordinal();
            case EQU:
            case NEQU:
            case IDENTICAL:
            case NIDENTICAL: return BinaryOptrPriorities.EQU.ordinal();
            case PLUS:
            case MINUS: return BinaryOptrPriorities.PLUS.ordinal();
            case TIMES:
            case DIVIDE: return BinaryOptrPriorities.TIMES.ordinal();
            case MOD: return BinaryOptrPriorities.MOD.ordinal();
            default: throw new RuntimeException("unknown operator:" + t);
        }
    }

  final public void TopStatementList() throws ParseException, CompilationException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INLINEHTML:
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case EOL:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case LBBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case UNSET:
      case ECHO:
      case CONST:
      case GOTO:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case FOREACH:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case GLOBAL:
      case NEW:
      case CLONE:
      case FUNCTION:
      case USE:
      case RETURN:
      case SILENT:
      case PRINT:
      case LIST:
      case EXIT:
      case THROW:
      case NAMESPACE:
      case HALT_COMPILER:
      case TRY:
      case CLASS:
      case INTERFACE:
      case FINAL:
      case ABSTRACT:
      case TRAIT:
      case DECLARE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      TopStatement();
    }
    jj_consume_token(0);
  }

  final public void TopStatement() throws ParseException, CompilationException {
    boolean t;
    if (jj_2_1(3)) {
      FunctionDeclaration();
    } else if (jj_2_2(3)) {
      ClassDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HALT_COMPILER:
        jj_consume_token(HALT_COMPILER);
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        jj_consume_token(EOL);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_3(2)) {
          jj_consume_token(NAMESPACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            NameSpaceName();
                            cp.DoEnterNameSpace((String)$().data);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
              jj_consume_token(EOL);
              break;
            case LBBRACKET:
              jj_consume_token(LBBRACKET);
              TopStatementList();
              jj_consume_token(RBBRACKET);
                                                           cp.DoLeaveNameSpace();
              break;
            default:
              jj_la1[1] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          case LBBRACKET:
            jj_consume_token(LBBRACKET);
            TopStatementList();
            jj_consume_token(RBBRACKET);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case USE:
            jj_consume_token(USE);
            UseList();
            jj_consume_token(EOL);
            break;
          case CONST:
            ConstDeclaration();
            break;
          case INLINEHTML:
          case PSTRING:
          case BEGIN_OF_SSTRING:
          case HEREDOC_ENTRY:
          case EOL:
          case PLUS:
          case MINUS:
          case INC:
          case DEC:
          case NOT:
          case BITAND:
          case BITNOT:
          case LBRACKET:
          case LCBRACKET:
          case LBBRACKET:
          case NSSEPERATOR:
          case INT_CAST:
          case FLOAT_CAST:
          case STRING_CAST:
          case ARRAY_CAST:
          case OBJECT_CAST:
          case BOOL_CAST:
          case UNSET_CAST:
          case ARRAY:
          case UNSET:
          case ECHO:
          case GOTO:
          case IF:
          case WHILE:
          case DO:
          case FOR:
          case FOREACH:
          case SWITCH:
          case BREAK:
          case CONTINUE:
          case EMPTY:
          case INCLUDE:
          case INCLUDE_ONCE:
          case REQUIRE:
          case REQUIRE_ONCE:
          case EVAL:
          case ISSET:
          case STATIC:
          case GLOBAL:
          case NEW:
          case CLONE:
          case FUNCTION:
          case RETURN:
          case SILENT:
          case PRINT:
          case LIST:
          case EXIT:
          case THROW:
          case NAMESPACE:
          case TRY:
          case DECLARE:
          case CLASS_C:
          case TRAIT_C:
          case FUNCTION_C:
          case METHOD_C:
          case LINE_C:
          case FILE_C:
          case DIR_C:
          case NAMESPACE_C:
          case IDENTIFIER:
          case VARIABLE:
          case DOLLAR:
          case NOMBRE:
          case INTEGER:
            Statement();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void UseList() throws ParseException, CompilationException {
    UseListItem();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(CAMMA);
      UseListItem();
    }
  }

  final public void UseListItem() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      NameSpaceName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        t = jj_consume_token(IDENTIFIER);

        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    case NSSEPERATOR:
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        t = jj_consume_token(IDENTIFIER);

        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Statement() throws ParseException, CompilationException {
    Token t;
    if (jj_2_4(2)) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(SLICE);

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INLINEHTML:
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case EOL:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case LBBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case UNSET:
      case ECHO:
      case GOTO:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case FOREACH:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case GLOBAL:
      case NEW:
      case CLONE:
      case FUNCTION:
      case RETURN:
      case SILENT:
      case PRINT:
      case LIST:
      case EXIT:
      case THROW:
      case NAMESPACE:
      case TRY:
      case DECLARE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        UntickedStatement();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ConstDeclaration() throws ParseException, CompilationException {
    Token t;
    jj_consume_token(CONST);
    ConstDeclarationItem();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(CAMMA);
      ConstDeclarationItem();
    }
    jj_consume_token(EOL);
  }

  final public void ConstDeclarationItem() throws ParseException, CompilationException {
    ConstName();
    jj_consume_token(ASSIGN);
    StaticConsts();
                                          cp.doDeclareConst((String)$().data);
  }

  final public void UntickedStatement() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBBRACKET:
      jj_consume_token(LBBRACKET);
      InnerStatementList();
      jj_consume_token(RBBRACKET);
      break;
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_5(2)) {
        InlineHTML();
                                   cp.DoEcho();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOTO:
          jj_consume_token(GOTO);
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(EOL);

          break;
        case RETURN:
          jj_consume_token(RETURN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PSTRING:
          case BEGIN_OF_SSTRING:
          case HEREDOC_ENTRY:
          case PLUS:
          case MINUS:
          case INC:
          case DEC:
          case NOT:
          case BITAND:
          case BITNOT:
          case LBRACKET:
          case LCBRACKET:
          case NSSEPERATOR:
          case INT_CAST:
          case FLOAT_CAST:
          case STRING_CAST:
          case ARRAY_CAST:
          case OBJECT_CAST:
          case BOOL_CAST:
          case UNSET_CAST:
          case ARRAY:
          case EMPTY:
          case INCLUDE:
          case INCLUDE_ONCE:
          case REQUIRE:
          case REQUIRE_ONCE:
          case EVAL:
          case ISSET:
          case STATIC:
          case NEW:
          case CLONE:
          case FUNCTION:
          case SILENT:
          case PRINT:
          case LIST:
          case EXIT:
          case NAMESPACE:
          case CLASS_C:
          case TRAIT_C:
          case FUNCTION_C:
          case METHOD_C:
          case LINE_C:
          case FILE_C:
          case DIR_C:
          case NAMESPACE_C:
          case IDENTIFIER:
          case VARIABLE:
          case DOLLAR:
          case NOMBRE:
          case INTEGER:
            Expr();
            jj_consume_token(EOL);
                       cp.DoReturnOrThrow(0);
            break;
          case EOL:
            jj_consume_token(EOL);
                  cp.DoNull();cp.DoReturnOrThrow(0);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case THROW:
          jj_consume_token(THROW);
          Expr();
          jj_consume_token(EOL);
                             cp.DoReturnOrThrow(1);
          break;
        case UNSET:
          Unset();
          break;
        case GLOBAL:
          GlobalDeclarations();
          break;
        default:
          jj_la1[15] = jj_gen;
          if (jj_2_6(2)) {
            StaticDeclarations();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ECHO:
              EchoStatement();
              break;
            case IF:
              IfStatement();
              break;
            case WHILE:
              WhileStatement();
              break;
            case DO:
              DoWhileStatement();
              break;
            case FOR:
              ForStatement();
              break;
            case SWITCH:
              SwitchStatement();
              break;
            case FOREACH:
              ForEachStatement();
              break;
            case TRY:
              TryCatchStatement();
              break;
            case DECLARE:
              DeclareStatement();
              break;
            case BREAK:
              jj_consume_token(BREAK);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                        cp.DoBreakOrContinue(0,false);
                break;
              case PSTRING:
              case BEGIN_OF_SSTRING:
              case HEREDOC_ENTRY:
              case PLUS:
              case MINUS:
              case INC:
              case DEC:
              case NOT:
              case BITAND:
              case BITNOT:
              case LBRACKET:
              case LCBRACKET:
              case NSSEPERATOR:
              case INT_CAST:
              case FLOAT_CAST:
              case STRING_CAST:
              case ARRAY_CAST:
              case OBJECT_CAST:
              case BOOL_CAST:
              case UNSET_CAST:
              case ARRAY:
              case EMPTY:
              case INCLUDE:
              case INCLUDE_ONCE:
              case REQUIRE:
              case REQUIRE_ONCE:
              case EVAL:
              case ISSET:
              case STATIC:
              case NEW:
              case CLONE:
              case FUNCTION:
              case SILENT:
              case PRINT:
              case LIST:
              case EXIT:
              case NAMESPACE:
              case CLASS_C:
              case TRAIT_C:
              case FUNCTION_C:
              case METHOD_C:
              case LINE_C:
              case FILE_C:
              case DIR_C:
              case NAMESPACE_C:
              case IDENTIFIER:
              case VARIABLE:
              case DOLLAR:
              case NOMBRE:
              case INTEGER:
                Expr();
                jj_consume_token(EOL);
                                                                          cp.DoBreakOrContinue(0,true);
                break;
              default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case CONTINUE:
              jj_consume_token(CONTINUE);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case EOL:
                jj_consume_token(EOL);
                           cp.DoBreakOrContinue(1,false);
                break;
              case PSTRING:
              case BEGIN_OF_SSTRING:
              case HEREDOC_ENTRY:
              case PLUS:
              case MINUS:
              case INC:
              case DEC:
              case NOT:
              case BITAND:
              case BITNOT:
              case LBRACKET:
              case LCBRACKET:
              case NSSEPERATOR:
              case INT_CAST:
              case FLOAT_CAST:
              case STRING_CAST:
              case ARRAY_CAST:
              case OBJECT_CAST:
              case BOOL_CAST:
              case UNSET_CAST:
              case ARRAY:
              case EMPTY:
              case INCLUDE:
              case INCLUDE_ONCE:
              case REQUIRE:
              case REQUIRE_ONCE:
              case EVAL:
              case ISSET:
              case STATIC:
              case NEW:
              case CLONE:
              case FUNCTION:
              case SILENT:
              case PRINT:
              case LIST:
              case EXIT:
              case NAMESPACE:
              case CLASS_C:
              case TRAIT_C:
              case FUNCTION_C:
              case METHOD_C:
              case LINE_C:
              case FILE_C:
              case DIR_C:
              case NAMESPACE_C:
              case IDENTIFIER:
              case VARIABLE:
              case DOLLAR:
              case NOMBRE:
              case INTEGER:
                Expr();
                jj_consume_token(EOL);
                                                                             cp.DoBreakOrContinue(1,true);
                break;
              default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case PSTRING:
            case BEGIN_OF_SSTRING:
            case HEREDOC_ENTRY:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case NOT:
            case BITAND:
            case BITNOT:
            case LBRACKET:
            case LCBRACKET:
            case NSSEPERATOR:
            case INT_CAST:
            case FLOAT_CAST:
            case STRING_CAST:
            case ARRAY_CAST:
            case OBJECT_CAST:
            case BOOL_CAST:
            case UNSET_CAST:
            case ARRAY:
            case EMPTY:
            case INCLUDE:
            case INCLUDE_ONCE:
            case REQUIRE:
            case REQUIRE_ONCE:
            case EVAL:
            case ISSET:
            case STATIC:
            case NEW:
            case CLONE:
            case FUNCTION:
            case SILENT:
            case PRINT:
            case LIST:
            case EXIT:
            case NAMESPACE:
            case CLASS_C:
            case TRAIT_C:
            case FUNCTION_C:
            case METHOD_C:
            case LINE_C:
            case FILE_C:
            case DIR_C:
            case NAMESPACE_C:
            case IDENTIFIER:
            case VARIABLE:
            case DOLLAR:
            case NOMBRE:
            case INTEGER:
              Expr();
              jj_consume_token(EOL);
                     cp.DoPop();
              break;
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void DeclareStatement() throws ParseException, CompilationException {
    jj_consume_token(DECLARE);
    jj_consume_token(LBRACKET);
    DeclareList();
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INLINEHTML:
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case EOL:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case LBBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case UNSET:
    case ECHO:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case FOREACH:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case GLOBAL:
    case NEW:
    case CLONE:
    case FUNCTION:
    case RETURN:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case THROW:
    case NAMESPACE:
    case TRY:
    case DECLARE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Statement();
      break;
    case SLICE:
      jj_consume_token(SLICE);
      InnerStatementList();
      jj_consume_token(ENDDECLARE);
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeclareList() throws ParseException, CompilationException {
    DeclareListItem();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      jj_consume_token(CAMMA);
      DeclareListItem();
    }
  }

  final public void DeclareListItem() throws ParseException, CompilationException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    StaticConsts();
  }

  final public void InlineHTML() throws ParseException {
    Token t;
    StringBuilder sb = new StringBuilder();
    label_5:
    while (true) {
      t = jj_consume_token(INLINEHTML);
                         sb.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INLINEHTML:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
    }
                                                    cp.DoString(sb.toString());
  }

  final public void Unset() throws ParseException, CompilationException {
    jj_consume_token(UNSET);
    jj_consume_token(LBRACKET);
    Expr();
                                cp.DoUnset();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      jj_consume_token(CAMMA);
      Expr();
                                                                   cp.DoUnset();
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(EOL);
  }

  final public void GlobalDeclarations() throws ParseException, CompilationException {
    jj_consume_token(GLOBAL);
    GlobalDeclarationItem();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(CAMMA);
      GlobalDeclarationItem();
    }
    jj_consume_token(EOL);
  }

  final public void GlobalDeclarationItem() throws ParseException, CompilationException {
    Token t;
    t = jj_consume_token(VARIABLE);
                     cp.DoGlobal(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                                                          cp.DoFindVariable(t.image,true);
      Expr();
                                                                                                      cp.doAssign(false);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void StaticDeclarations() throws ParseException, CompilationException {
    jj_consume_token(STATIC);
    label_8:
    while (true) {
      StaticDeclarationItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(EOL);
  }

  final public void StaticDeclarationItem() throws ParseException, CompilationException {
    Token t;
    t = jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expr();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }

  }

  final public void IfStatement() throws ParseException, CompilationException {
    jj_consume_token(IF);
    jj_consume_token(LBRACKET);
    Expr();
                             cp.DoBeginIfStatement();
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLICE:
      jj_consume_token(SLICE);
      InnerStatementList();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_9;
        }
        jj_consume_token(ELSEIF);
                       cp.DoEndIfBlock();
        jj_consume_token(LBRACKET);
        Expr();
        jj_consume_token(RBRACKET);
                                           cp.DoElseIfBlock();
        jj_consume_token(SLICE);
        InnerStatementList();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
                      cp.DoEndIfBlock();
        jj_consume_token(SLICE);
        InnerStatementList();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      jj_consume_token(ENDIF);
      jj_consume_token(EOL);
                                                                                          cp.DoEndIfStatement();
      break;
    case INLINEHTML:
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case EOL:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case LBBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case UNSET:
    case ECHO:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case FOREACH:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case GLOBAL:
    case NEW:
    case CLONE:
    case FUNCTION:
    case RETURN:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case THROW:
    case NAMESPACE:
    case TRY:
    case DECLARE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Statement();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        jj_consume_token(ELSEIF);
                       cp.DoEndIfBlock();
        jj_consume_token(LBRACKET);
        Expr();
        jj_consume_token(RBRACKET);
                                           cp.DoElseIfBlock();
        Statement();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
                      cp.DoEndIfBlock();
        Statement();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
                                                           cp.DoEndIfStatement();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WhileStatement() throws ParseException, CompilationException {
    jj_consume_token(WHILE);
              cp.DoWhileStatement(0);
    jj_consume_token(LBRACKET);
    Expr();
                                                            cp.DoWhileStatement(1);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLICE:
      jj_consume_token(SLICE);
      InnerStatementList();
      jj_consume_token(ENDWHILE);
      jj_consume_token(EOL);
                                                        cp.DoWhileStatement(2);
      break;
    case INLINEHTML:
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case EOL:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case LBBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case UNSET:
    case ECHO:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case FOREACH:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case GLOBAL:
    case NEW:
    case CLONE:
    case FUNCTION:
    case RETURN:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case THROW:
    case NAMESPACE:
    case TRY:
    case DECLARE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Statement();
                        cp.DoWhileStatement(2);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DoWhileStatement() throws ParseException, CompilationException {
    jj_consume_token(DO);
           cp.DoDoWhileStatement(0);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LBRACKET);
                                                                        cp.DoDoWhileStatement(1);
    Expr();
    jj_consume_token(RBRACKET);
    jj_consume_token(EOL);
                                                                                                                              cp.DoDoWhileStatement(2);
  }

  final public void ForStatement() throws ParseException, CompilationException {
    jj_consume_token(FOR);
    jj_consume_token(LBRACKET);
    ForExprList();
    jj_consume_token(EOL);
                              cp.DoForStatement(0);
    ForExprList();
    jj_consume_token(EOL);
                              cp.DoForStatement(1);
    ForExprList();
    jj_consume_token(RBRACKET);
                                   cp.DoForStatement(2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLICE:
      jj_consume_token(SLICE);
      InnerStatementList();
      jj_consume_token(ENDFOR);
      jj_consume_token(EOL);
                                                      cp.DoForStatement(3);
      break;
    case INLINEHTML:
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case EOL:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case LBBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case UNSET:
    case ECHO:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case FOREACH:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case GLOBAL:
    case NEW:
    case CLONE:
    case FUNCTION:
    case RETURN:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case THROW:
    case NAMESPACE:
    case TRY:
    case DECLARE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Statement();
                        cp.DoForStatement(3);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForExprList() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case NEW:
    case CLONE:
    case FUNCTION:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Expr();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        jj_consume_token(CAMMA);
                         cp.DoPop();
        Expr();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  final public void SwitchStatement() throws ParseException, CompilationException {
    jj_consume_token(SWITCH);
    jj_consume_token(LBRACKET);
                          cp.DoSwitchStatement(0);
    Expr();
                                                              cp.DoSwitchStatement(1);
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLICE:
      jj_consume_token(SLICE);
      SwitchBody();
      jj_consume_token(ENDSWITCH);
      jj_consume_token(EOL);
                                                 cp.DoSwitchStatement(2);
      break;
    case LBBRACKET:
      jj_consume_token(LBBRACKET);
      SwitchBody();
      jj_consume_token(RBBRACKET);
                                                 cp.DoSwitchStatement(2);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchBody() throws ParseException, CompilationException {
    label_12:
    while (true) {
      SwitchBodyStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INLINEHTML:
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case EOL:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case LBBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case UNSET:
      case ECHO:
      case GOTO:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case FOREACH:
      case SWITCH:
      case CASE:
      case DEFAULTL:
      case BREAK:
      case CONTINUE:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case GLOBAL:
      case NEW:
      case CLONE:
      case FUNCTION:
      case RETURN:
      case SILENT:
      case PRINT:
      case LIST:
      case EXIT:
      case THROW:
      case NAMESPACE:
      case TRY:
      case CLASS:
      case INTERFACE:
      case FINAL:
      case ABSTRACT:
      case TRAIT:
      case DECLARE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_12;
      }
    }
  }

  final public void SwitchBodyStatement() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
             { cp.DoSwitchLabel(0); }
      Expr();
                                                 cp.DoSwitchLabel(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLICE:
        jj_consume_token(SLICE);
        break;
      case EOL:
        jj_consume_token(EOL);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DEFAULTL:
      jj_consume_token(DEFAULTL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLICE:
        jj_consume_token(SLICE);
        break;
      case EOL:
        jj_consume_token(EOL);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       cp.DoSwitchLabel(2);
      break;
    case INLINEHTML:
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case EOL:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case LBBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case UNSET:
    case ECHO:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case FOREACH:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case GLOBAL:
    case NEW:
    case CLONE:
    case FUNCTION:
    case RETURN:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case THROW:
    case NAMESPACE:
    case TRY:
    case CLASS:
    case INTERFACE:
    case FINAL:
    case ABSTRACT:
    case TRAIT:
    case DECLARE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      InnerStatement();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForEachStatement() throws ParseException, CompilationException {
    jj_consume_token(FOREACH);
    jj_consume_token(LBRACKET);
    Expr();
                                  cp.doForEachStatement(0);
    jj_consume_token(AS);
    ForEachExpr();
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLICE:
      jj_consume_token(SLICE);
      InnerStatementList();
      jj_consume_token(ENDFOREACH);
      jj_consume_token(EOL);
                                                          cp.doForEachStatement(1);
      break;
    case INLINEHTML:
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case EOL:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case LBBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case UNSET:
    case ECHO:
    case GOTO:
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case FOREACH:
    case SWITCH:
    case BREAK:
    case CONTINUE:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case GLOBAL:
    case NEW:
    case CLONE:
    case FUNCTION:
    case RETURN:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case THROW:
    case NAMESPACE:
    case TRY:
    case DECLARE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Statement();
                        cp.doForEachStatement(1);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForEachExpr() throws ParseException, CompilationException {
    boolean r1 = false,r2 = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
      jj_consume_token(BITAND);
                 r1 = true;
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    AtomicExpr();
                                               cp.doForEachFirstExpr(r1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEARROW:
      jj_consume_token(DOUBLEARROW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case BITAND:
      case LBRACKET:
      case LCBRACKET:
      case NSSEPERATOR:
      case ARRAY:
      case STATIC:
      case NEW:
      case FUNCTION:
      case NAMESPACE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BITAND:
          jj_consume_token(BITAND);
                                     r2 = true;
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        AtomicExpr();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
                                                                     cp.doForEachSecondExpr(r2);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  final public void TryCatchStatement() throws ParseException, CompilationException {
    jj_consume_token(TRY);
    jj_consume_token(LBBRACKET);
                        cp.DoBeginTry();
    InnerStatementList();
    jj_consume_token(RBBRACKET);
    CatchItem(true);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_13;
      }
      CatchItem(false);
    }
                                            cp.DoEndTryCatchBlock();
  }

  final public void CatchItem(boolean is_first) throws ParseException, CompilationException {
    Token t;
    String typename = "";
    jj_consume_token(CATCH);
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NSSEPERATOR:
    case NAMESPACE:
    case IDENTIFIER:
      ClassName();
                                       typename = (String)$().data;
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    t = jj_consume_token(VARIABLE);
    jj_consume_token(RBRACKET);
    jj_consume_token(LBBRACKET);
                   cp.DoCatchBlock(is_first,t.image,typename);
    InnerStatementList();
    jj_consume_token(RBBRACKET);
  }

  final public void ClassDeclaration() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case FINAL:
    case ABSTRACT:
    case TRAIT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);

        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        jj_consume_token(CLASS);

        break;
      case TRAIT:
        jj_consume_token(TRAIT);

        break;
      case FINAL:
        jj_consume_token(FINAL);
        jj_consume_token(CLASS);

        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        FullyQualifiedClassName();

        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        ImplementList();

        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(LBBRACKET);
      ClassBody();
      jj_consume_token(RBBRACKET);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      t = jj_consume_token(IDENTIFIER);

      InterfaceExtendList();
      jj_consume_token(LBBRACKET);
      ClassBody();
      jj_consume_token(RBBRACKET);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ImplementList() throws ParseException, CompilationException {
    FullyQualifiedClassName();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_14;
      }
      jj_consume_token(CAMMA);
      FullyQualifiedClassName();
    }
  }

  final public void InterfaceExtendList() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      InterfaceList();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
  }

  final public void InterfaceList() throws ParseException, CompilationException {
    FullyQualifiedClassName();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_15;
      }
      jj_consume_token(CAMMA);
      FullyQualifiedClassName();
    }
  }

  final public void ClassBody() throws ParseException, CompilationException {
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case STATIC:
      case FUNCTION:
      case USE:
      case VAR:
      case FINAL:
      case ABSTRACT:
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case STATIC:
      case FUNCTION:
      case VAR:
      case FINAL:
      case ABSTRACT:
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
      case VARIABLE:
        MemberDecl();
        break;
      case USE:
        TraitUseStatement();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MemberDecl() throws ParseException, CompilationException {
    Token t;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
      case VAR:
      case FINAL:
      case ABSTRACT:
      case PUBLIC:
      case PROTECTED:
      case PRIVATE:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case PUBLIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case VAR:
          jj_consume_token(VAR);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);

        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);

        break;
      case STATIC:
        jj_consume_token(STATIC);

        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);

        break;
      case FINAL:
        jj_consume_token(FINAL);

        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      VariableMember();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_18;
        }
        jj_consume_token(CAMMA);
        VariableMember();
      }
      jj_consume_token(EOL);
      break;
    case CONST:
      ConstMember();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_19;
        }
        jj_consume_token(CAMMA);
        ConstMember();
      }
      jj_consume_token(EOL);
      break;
    case FUNCTION:
      MethodMember();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TraitUseStatement() throws ParseException, CompilationException {
    jj_consume_token(USE);
    TraitList();
    TraitAdaptations();
  }

  final public void TraitList() throws ParseException, CompilationException {
    FullyQualifiedClassName();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_20;
      }
      jj_consume_token(CAMMA);
      FullyQualifiedClassName();
    }
  }

  final public void TraitAdaptations() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case LBBRACKET:
      jj_consume_token(LBBRACKET);
      TraitAdaptationList();
      jj_consume_token(RBBRACKET);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TraitAdaptationList() throws ParseException, CompilationException {
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NSSEPERATOR:
      case NAMESPACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_21;
      }
      if (jj_2_7(2147483647)) {
        TraitMethodReferenceFullyQualified();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSTANCEOF:
          jj_consume_token(INSTANCEOF);
          TraitList();
          jj_consume_token(EOL);
          break;
        case AS:
          jj_consume_token(AS);
          TraitAliasItem();
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NSSEPERATOR:
        case NAMESPACE:
        case IDENTIFIER:
          TraitMethodReference();
          jj_consume_token(AS);
          TraitAliasItem();
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void TraitAliasItem() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case PROTECTED:
    case PRIVATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);

        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);

        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);

        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);

        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);

      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TraitMethodReferenceFullyQualified() throws ParseException, CompilationException {
    Token t;
    FullyQualifiedClassName();
    jj_consume_token(DOUBLESLICE);
    t = jj_consume_token(IDENTIFIER);

  }

  final public void TraitMethodReference() throws ParseException, CompilationException {
    Token t;
    if (jj_2_8(2147483647)) {
      TraitMethodReferenceFullyQualified();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);

        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void VariableMember() throws ParseException, CompilationException {
    Token t;
    t = jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expr();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }

  }

  final public void ConstMember() throws ParseException, CompilationException {
    Token t;
    jj_consume_token(CONST);
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expr();
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }

  }

  final public void MethodMember() throws ParseException, CompilationException {
    Token t;
    jj_consume_token(FUNCTION);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
      jj_consume_token(BITAND);

      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    ParametreList();
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case LBBRACKET:
    case USE:
      ScopeUseList();
      jj_consume_token(LBBRACKET);
      InnerStatementList();
      jj_consume_token(RBBRACKET);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InnerStatementList() throws ParseException, CompilationException {
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INLINEHTML:
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case EOL:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case LBBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case UNSET:
      case ECHO:
      case GOTO:
      case IF:
      case WHILE:
      case DO:
      case FOR:
      case FOREACH:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case GLOBAL:
      case NEW:
      case CLONE:
      case FUNCTION:
      case RETURN:
      case SILENT:
      case PRINT:
      case LIST:
      case EXIT:
      case THROW:
      case NAMESPACE:
      case TRY:
      case CLASS:
      case INTERFACE:
      case FINAL:
      case ABSTRACT:
      case TRAIT:
      case DECLARE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_22;
      }
      InnerStatement();
    }
  }

  final public void InnerStatement() throws ParseException, CompilationException {
    if (jj_2_9(2)) {
      Statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        FunctionDeclaration();
        break;
      case CLASS:
      case INTERFACE:
      case FINAL:
      case ABSTRACT:
      case TRAIT:
        ClassDeclaration();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Expr() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIST:
      jj_consume_token(LIST);
      jj_consume_token(LBRACKET);
      AssignmentList();
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      Expr();
                                                                    cp.doAssign(true);
      break;
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case NEW:
    case CLONE:
    case FUNCTION:
    case SILENT:
    case PRINT:
    case EXIT:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      ConditionalExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case ASSIGNPLUS:
      case ASSIGNMINUS:
      case ASSIGNTIMES:
      case ASSIGNDIVIDE:
      case ASSIGNMOD:
      case ASSIGNCONCAT:
      case ASSIGNBITAND:
      case ASSIGNBITOR:
      case ASSIGNBITXOR:
      case ASSIGNLSHIFT:
      case ASSIGNRSHIFT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
                   cp.convertRvalueToLvalue();
          Expr();
                                                          cp.doAssign(false);
          break;
        case ASSIGNPLUS:
          jj_consume_token(ASSIGNPLUS);
                         cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                              cp.DoBinaryOptr(PLUS);cp.doAssign(false);
          break;
        case ASSIGNMINUS:
          jj_consume_token(ASSIGNMINUS);
                          cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(MINUS);cp.doAssign(false);
          break;
        case ASSIGNTIMES:
          jj_consume_token(ASSIGNTIMES);
                          cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                              cp.DoBinaryOptr(TIMES);cp.doAssign(false);
          break;
        case ASSIGNDIVIDE:
          jj_consume_token(ASSIGNDIVIDE);
                           cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(DIVIDE);cp.doAssign(false);
          break;
        case ASSIGNMOD:
          jj_consume_token(ASSIGNMOD);
                        cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                            cp.DoBinaryOptr(MOD);cp.doAssign(false);
          break;
        case ASSIGNCONCAT:
          jj_consume_token(ASSIGNCONCAT);
                           cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(CONCAT);cp.doAssign(false);
          break;
        case ASSIGNBITAND:
          jj_consume_token(ASSIGNBITAND);
                           cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(BITAND);cp.doAssign(false);
          break;
        case ASSIGNBITOR:
          jj_consume_token(ASSIGNBITOR);
                          cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                              cp.DoBinaryOptr(BITOR);cp.doAssign(false);
          break;
        case ASSIGNBITXOR:
          jj_consume_token(ASSIGNBITXOR);
                           cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(BITXOR);cp.doAssign(false);
          break;
        case ASSIGNLSHIFT:
          jj_consume_token(ASSIGNLSHIFT);
                           cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(LSHIFT);cp.doAssign(false);
          break;
        case ASSIGNRSHIFT:
          jj_consume_token(ASSIGNRSHIFT);
                           cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference();
          Expr();
                                                                                               cp.DoBinaryOptr(RSHIFT);cp.doAssign(false);
          break;
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignmentList() throws ParseException, CompilationException {
      cp.DoNewArray();
    AssignmentListItem();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_23;
      }
      jj_consume_token(CAMMA);
      AssignmentListItem();
    }
  }

  final public void AssignmentListItem() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case NEW:
    case CLONE:
    case FUNCTION:
    case SILENT:
    case PRINT:
    case EXIT:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      UnaryExpr();
                  cp.convertRvalueToLvalue();cp.DoAddArrayItem(false);
      break;
    case LIST:
      jj_consume_token(LIST);
      AssignmentList();
      break;
    default:
      jj_la1[80] = jj_gen;
        cp.DoNull();cp.DoAddArrayItem(false);
    }
  }

  final public void ConditionalExpr() throws ParseException, CompilationException {
    BinaryExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EAR:
      jj_consume_token(EAR);
                cp.DoConditionalExpr(0);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case NEW:
      case CLONE:
      case FUNCTION:
      case SILENT:
      case PRINT:
      case EXIT:
      case NAMESPACE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        BinaryExpr();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
                                                              cp.DoConditionalExpr(1);
      jj_consume_token(SLICE);
      ConditionalExpr();
                                                                                                                     cp.DoConditionalExpr(2);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
  }

  final public void BinaryExpr() throws ParseException, CompilationException {
    Token t;
    Stack<Token> ts = null;
    UnaryExpr();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case TIMES:
      case DIVIDE:
      case CONCAT:
      case MOD:
      case MT:
      case LT:
      case MTOE:
      case LTOE:
      case EQU:
      case NEQU:
      case IDENTICAL:
      case NIDENTICAL:
      case AND:
      case OR:
      case XOR:
      case BITAND:
      case BITOR:
      case BITXOR:
      case LSHIFT:
      case RSHIFT:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        t = jj_consume_token(OR);
        break;
      case AND:
        t = jj_consume_token(AND);
        break;
      case XOR:
        t = jj_consume_token(XOR);
        break;
      case BITOR:
        t = jj_consume_token(BITOR);
        break;
      case BITXOR:
        t = jj_consume_token(BITXOR);
        break;
      case BITAND:
        t = jj_consume_token(BITAND);
        break;
      case EQU:
        t = jj_consume_token(EQU);
        break;
      case NEQU:
        t = jj_consume_token(NEQU);
        break;
      case IDENTICAL:
        t = jj_consume_token(IDENTICAL);
        break;
      case NIDENTICAL:
        t = jj_consume_token(NIDENTICAL);
        break;
      case MT:
        t = jj_consume_token(MT);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case MTOE:
        t = jj_consume_token(MTOE);
        break;
      case LTOE:
        t = jj_consume_token(LTOE);
        break;
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSHIFT:
        t = jj_consume_token(RSHIFT);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case CONCAT:
        t = jj_consume_token(CONCAT);
        break;
      case TIMES:
        t = jj_consume_token(TIMES);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case MOD:
        t = jj_consume_token(MOD);
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            ts = new Stack<Token>();
            int p1 = getBinaryOptrPriority(t.kind);
            if(ts.empty()){
                ts.push(t);
            }
            else if(p1 >= getBinaryOptrPriority(ts.peek().kind)){
                ts.push(t);
            }
            else{
                Token t2;
                while(!ts.empty() && p1 < getBinaryOptrPriority(ts.peek().kind)){
                    t2 = ts.pop();
                    cp.DoBinaryOptr(t2.kind);
                }
                ts.push(t);
            }
      UnaryExpr();
    }
        while(ts != null && !ts.empty()){
            cp.DoBinaryOptr(ts.pop().kind);
        }
  }

/*
void BinaryExpr() :
{}
{
  AndExpr() ( <OR> AndExpr() )*
}

void AndExpr() :
{}
{
  OrExpr() ( <AND> OrExpr() )*
}

void OrExpr():
{}
{
  BitOrExpr() ( <BITOR> BitOrExpr() )*
}

void BitOrExpr() :
{}
{
  BitAndExpr() ( <BITXOR> BitAndExpr()  )*
}

void BitAndExpr() :
{}
{
  EquExpr() ( <BITAND> EquExpr() )*
}

void EquExpr():
{}
{
  RelationalExpr() (
    <EQU> RelationalExpr()
    | <NEQU> RelationalExpr()
    | <IDENTICAL> RelationalExpr()
    | <NIDENTICAL> RelationalExpr()
  )*
}

void RelationalExpr():
{}
{
  ShiftExpr() (
    <MT> ShiftExpr()
    | <LT> ShiftExpr()
    | <MTOE> ShiftExpr()
    | <LTOE> ShiftExpr()
  )*
}

void ShiftExpr():
{}
{
  AdditiveExpr() (
    <LSHIFT> AdditiveExpr()
    | <RSHIFT> AdditiveExpr()
  )*
}

void AdditiveExpr():
{}
{
  MultiplicativeExpr() (
    <PLUS> MultiplicativeExpr()
    | <MINUS> MultiplicativeExpr()
    | <CONCAT> MultiplicativeExpr()
  )*
}

void MultiplicativeExpr():
{}
{
  UnaryExpr() (
    <TIMES> UnaryExpr()
    | <DIVIDE> UnaryExpr()
    | <MOD> UnaryExpr()
  )*
}
*/
  final public void UnaryExpr() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      UnaryExpr();
      break;
    case MINUS:
      jj_consume_token(MINUS);
      UnaryExpr();
                            cp.DoUnaryOptr(MINUS);
      break;
    case INC:
      jj_consume_token(INC);
      UnaryExpr();
                          cp.convertRvalueToLvalue();cp.DoUnaryOptr(INC);
      break;
    case DEC:
      jj_consume_token(DEC);
      UnaryExpr();
                          cp.convertRvalueToLvalue();cp.DoUnaryOptr(DEC);
      break;
    case NOT:
      jj_consume_token(NOT);
      UnaryExpr();
                          cp.DoUnaryOptr(NOT);
      break;
    case BITAND:
      jj_consume_token(BITAND);
      UnaryExpr();
                             cp.DoReference();
      break;
    case BITNOT:
      jj_consume_token(BITNOT);
      UnaryExpr();
                             cp.DoUnaryOptr(BITNOT);
      break;
    case CLONE:
      jj_consume_token(CLONE);
      UnaryExpr();
                            cp.DoUnaryOptr(CLONE);
      break;
    case SILENT:
      jj_consume_token(SILENT);
                 cp.doBeginSilent();
      UnaryExpr();
                                                     cp.doEndSilent();
      break;
    case PRINT:
      jj_consume_token(PRINT);
      UnaryExpr();
                            cp.DoPrint();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      ExitExpr();
                          cp.DoExit();
      break;
    case INT_CAST:
      jj_consume_token(INT_CAST);
      UnaryExpr();
                               cp.doCast(0);
      break;
    case FLOAT_CAST:
      jj_consume_token(FLOAT_CAST);
      UnaryExpr();
                                 cp.doCast(1);
      break;
    case STRING_CAST:
      jj_consume_token(STRING_CAST);
      UnaryExpr();
                                  cp.doCast(2);
      break;
    case ARRAY_CAST:
      jj_consume_token(ARRAY_CAST);
      UnaryExpr();
                                 cp.doCast(3);
      break;
    case OBJECT_CAST:
      jj_consume_token(OBJECT_CAST);
      UnaryExpr();
                                  cp.doCast(4);
      break;
    case BOOL_CAST:
      jj_consume_token(BOOL_CAST);
      UnaryExpr();
                                cp.doCast(5);
      break;
    case UNSET_CAST:
      jj_consume_token(UNSET_CAST);
      UnaryExpr();
                                 cp.doCast(6);
      break;
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case LBRACKET:
    case LCBRACKET:
    case NSSEPERATOR:
    case ARRAY:
    case STATIC:
    case NEW:
    case FUNCTION:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      AtomicExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
      case DEC:
      case INSTANCEOF:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INC:
          jj_consume_token(INC);
                             cp.convertRvalueToLvalue();cp.DoPostIncOrDec(false);
          break;
        case DEC:
          jj_consume_token(DEC);
                                                                                              cp.convertRvalueToLvalue();cp.DoPostIncOrDec(true);
          break;
        case INSTANCEOF:
          jj_consume_token(INSTANCEOF);
          ClassNameReference();
                                                                                                                                                                                          cp.DoFindClass((String)$().data);cp.DoInstanceOf();
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      break;
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
      InternalFunctions();
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NewExpr() throws ParseException, CompilationException {
    Token t;
    ClassNameReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      ArgList();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[88] = jj_gen;
            cp.DoPackArg(0);
    }
  }

  final public void ExitExpr() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case NEW:
      case CLONE:
      case FUNCTION:
      case SILENT:
      case PRINT:
      case LIST:
      case EXIT:
      case NAMESPACE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        Expr();
        jj_consume_token(RBRACKET);
        break;
      case RBRACKET:
        jj_consume_token(RBRACKET);
                                                  cp.DoNombre(0,true);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[90] = jj_gen;
        cp.DoNombre(0,true);
    }
  }

  final public void AtomicExpr() throws ParseException, CompilationException {
    Atom();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case LCBRACKET:
      case LBBRACKET:
      case ARROW:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_25;
      }
      Trailer();
    }
  }

  final public void Trailer() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      ArgList();
      jj_consume_token(RBRACKET);
                                      cp.DoFunctionCall();
      break;
    case LCBRACKET:
      jj_consume_token(LCBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case NOT:
      case BITAND:
      case BITNOT:
      case LBRACKET:
      case LCBRACKET:
      case NSSEPERATOR:
      case INT_CAST:
      case FLOAT_CAST:
      case STRING_CAST:
      case ARRAY_CAST:
      case OBJECT_CAST:
      case BOOL_CAST:
      case UNSET_CAST:
      case ARRAY:
      case EMPTY:
      case INCLUDE:
      case INCLUDE_ONCE:
      case REQUIRE:
      case REQUIRE_ONCE:
      case EVAL:
      case ISSET:
      case STATIC:
      case NEW:
      case CLONE:
      case FUNCTION:
      case SILENT:
      case PRINT:
      case LIST:
      case EXIT:
      case NAMESPACE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        Expr();
        jj_consume_token(RCBRACKET);
                             cp.DoSubscript(false);
        break;
      case RCBRACKET:
        jj_consume_token(RCBRACKET);
                        cp.DoSubscript(true);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LBBRACKET:
      jj_consume_token(LBBRACKET);
      Expr();
      jj_consume_token(RBBRACKET);
                                       cp.DoSubscript(false);
      break;
    case ARROW:
      jj_consume_token(ARROW);
      ObjectMember();
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Atom() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case DOLLAR:
      Variable();
      break;
    case NSSEPERATOR:
    case STATIC:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case NOMBRE:
    case INTEGER:
      ClassMemberAndConst();
      break;
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
      String();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      Expr();
      jj_consume_token(RBRACKET);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(LBRACKET);
                           cp.DoNewArray();
      ArrayBody();
      jj_consume_token(RBRACKET);
      break;
    case LCBRACKET:
      jj_consume_token(LCBRACKET);
                    cp.DoNewArray();
      ArrayBody();
      jj_consume_token(RCBRACKET);
      break;
    case FUNCTION:
      AnonymousFunction();
      break;
    case NEW:
      jj_consume_token(NEW);
      NewExpr();
                        cp.DoNew();
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassMemberAndConst() throws ParseException, CompilationException {
    boolean hasmember = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NSSEPERATOR:
    case NAMESPACE:
    case IDENTIFIER:
      ConstName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLESLICE:
        jj_consume_token(DOUBLESLICE);
                                  cp.doFetchClass((String)$().data);hasmember = true;
        ClassMember();
                                                                                                        hasmember = true;
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      if (jj_2_10(2147483647)) {
                                  if(!hasmember)cp.DoFindFunction((String)$().data);
      } else {
            if(!hasmember)cp.doFindConst((String)$().data,false);
      }
      break;
    case STATIC:
      jj_consume_token(STATIC);
                 cp.doFetchClass("static");
      jj_consume_token(DOUBLESLICE);
      ClassMember();
      break;
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case NOMBRE:
    case INTEGER:
      Constant();
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassMember() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
                     cp.DoString(t.image);cp.doFindClassVar(false);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      if (jj_2_11(2147483647)) {
                                  cp.doFindClassFunction(t.image);
      } else {
            cp.doFindClassConst(t.image);
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void String() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN_OF_SSTRING:
      SString();
      break;
    case PSTRING:
      t = jj_consume_token(PSTRING);
                          cp.DoString(t.image);
      break;
    case HEREDOC_ENTRY:
      HereDoc();
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SString() throws ParseException, CompilationException {
    Token t;
    int count = 0;
    jj_consume_token(BEGIN_OF_SSTRING);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY_IN_STRING:
      case PROPERTY_IN_STRING:
      case VARIABLE_IN_STRING:
      case VARVARIABLE_IN_STRING:
      case EXPR_IN_STRING:
      case OTHERS_IN_STRING:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_26;
      }
      EcapedVar();
                                       count++;
    }
    jj_consume_token(END_OF_STRING);
                                                                       if(count == 0) cp.DoString(""); else if(count > 1) cp.DoConcat(count);
  }

  final public void HereDoc() throws ParseException, CompilationException {
    int count = 0;
    Token t;
    String start;
    jj_consume_token(HEREDOC_ENTRY);
    t = jj_consume_token(IDENTIFIER);
                                       start = t.image;SwitchTo(IN_HEREDOC);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY_IN_STRING:
      case PROPERTY_IN_STRING:
      case VARIABLE_IN_STRING:
      case VARVARIABLE_IN_STRING:
      case EXPR_IN_STRING:
      case OTHERS_IN_STRING:
        EcapedVar();
                    count++;
        break;
      case NAME_IN_HEREDOC:
        t = jj_consume_token(NAME_IN_HEREDOC);
        if(start.equals(t.image)){
            SwitchTo(IN_SCRIPTING);
            cp.DoConcat(count);
            {if (true) return;}
        }
        else {
            cp.DoString(t.image);
            count++;
        }
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY_IN_STRING:
      case PROPERTY_IN_STRING:
      case VARIABLE_IN_STRING:
      case VARVARIABLE_IN_STRING:
      case EXPR_IN_STRING:
      case OTHERS_IN_STRING:
      case NAME_IN_HEREDOC:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_27;
      }
    }
  }

  final public void EcapedVar() throws ParseException, CompilationException {
    Token t;
    int s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_IN_STRING:
      t = jj_consume_token(VARIABLE_IN_STRING);
                               cp.DoFindVariable(t.image,false);cp.DoToString();
      break;
    case OTHERS_IN_STRING:
      t = jj_consume_token(OTHERS_IN_STRING);
                               cp.DoString(t.image);
      break;
    case VARVARIABLE_IN_STRING:
      jj_consume_token(VARVARIABLE_IN_STRING);
                                s = token_source.curLexState;SwitchTo(IN_SCRIPTING);
      Expr();
      jj_consume_token(RBBRACKET);
                                                                                                            SwitchTo(s);cp.DoFindVariableByName(false);cp.DoToString();
      break;
    case EXPR_IN_STRING:
      jj_consume_token(EXPR_IN_STRING);
                         s = token_source.curLexState;SwitchTo(IN_SCRIPTING);
      Expr();
      jj_consume_token(RBBRACKET);
                                                                                                     SwitchTo(s);cp.DoToString();
      break;
    case ARRAY_IN_STRING:
      t = jj_consume_token(ARRAY_IN_STRING);
                              cp.DoFindVariable(t.image,false);s = token_source.curLexState;SwitchTo(IN_SCRIPTING);
      Expr();
      jj_consume_token(RCBRACKET);
                                                                                                                                           SwitchTo(s);cp.DoSubscript(false);cp.DoToString();
      break;
    case PROPERTY_IN_STRING:
      t = jj_consume_token(PROPERTY_IN_STRING);
        int a = t.image.lastIndexOf("->");
        int b = t.image.length();
        String vname = t.image.substring(1,a);
        String property = t.image.substring(a + 2,b - 1);
        cp.DoFindVariable(vname,false);
        cp.DoString(property);
        cp.DoRequestMember(false);
        cp.DoToString();
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Constant() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMBRE:
      t = jj_consume_token(NOMBRE);
                   cp.DoNombre(Double.parseDouble(t.image),false);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                      cp.DoNombre(Integer.parseInt(t.image),true);
      break;
    case CLASS_C:
      jj_consume_token(CLASS_C);
      break;
    case TRAIT_C:
      jj_consume_token(TRAIT_C);
      break;
    case FUNCTION_C:
      jj_consume_token(FUNCTION_C);
      break;
    case METHOD_C:
      jj_consume_token(METHOD_C);
      break;
    case LINE_C:
      jj_consume_token(LINE_C);
      break;
    case FILE_C:
      jj_consume_token(FILE_C);
      break;
    case DIR_C:
      jj_consume_token(DIR_C);
      break;
    case NAMESPACE_C:
      jj_consume_token(NAMESPACE_C);
                      cp.DoString(cp.getCurrentNameSpace());
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AnonymousFunction() throws ParseException, CompilationException {
    Token t;
    jj_consume_token(FUNCTION);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
      jj_consume_token(BITAND);

      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    jj_consume_token(LBRACKET);
    ParametreList();
    jj_consume_token(RBRACKET);
    ScopeUseList();
    jj_consume_token(LBBRACKET);
    InnerStatementList();
    jj_consume_token(RBBRACKET);
  }

  final public void ScopeUseList() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USE:
      jj_consume_token(USE);
      jj_consume_token(LBRACKET);
      ScopeUseListItem();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_28;
        }
        jj_consume_token(CAMMA);
        ScopeUseListItem();
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
  }

  final public void ScopeUseListItem() throws ParseException, CompilationException {
    Token t;
    boolean is_ref = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
      jj_consume_token(BITAND);
                 is_ref = true;
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    t = jj_consume_token(VARIABLE);
                                                     cp.doFunctionUse(t.image,is_ref);
  }

  final public void AnonymousClass() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case FINAL:
    case ABSTRACT:
    case TRAIT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);

        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        jj_consume_token(CLASS);

        break;
      case TRAIT:
        jj_consume_token(TRAIT);

        break;
      case FINAL:
        jj_consume_token(FINAL);
        jj_consume_token(CLASS);

        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AnonymousClassArgList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        FullyQualifiedClassName();

        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        ImplementList();

        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      jj_consume_token(LBBRACKET);
      ClassBody();
      jj_consume_token(RBBRACKET);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      AnonymousClassArgList();
      InterfaceExtendList();
      jj_consume_token(LBBRACKET);
      ClassBody();
      jj_consume_token(RBBRACKET);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AnonymousClassArgList() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      ArgList();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
  }

  final public void Variable() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
                     cp.DoFindVariable(t.image,false);
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        t = jj_consume_token(VARIABLE);
                         cp.DoFindVariable(t.image,false);cp.DoFindVariableByName(false);
        break;
      case LBBRACKET:
        jj_consume_token(LBBRACKET);
        Expr();
        jj_consume_token(RBBRACKET);
                                           cp.DoFindVariableByName(false);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayBody() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case NEW:
    case CLONE:
    case FUNCTION:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      ArrayBodyItem();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[115] = jj_gen;
          break label_29;
        }
        if (jj_2_12(2147483647)) {
          jj_consume_token(CAMMA);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAMMA:
            jj_consume_token(CAMMA);
            ArrayBodyItem();
            break;
          default:
            jj_la1[116] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
  }

  final public void ArrayBodyItem() throws ParseException, CompilationException {
    Expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEARROW:
      jj_consume_token(DOUBLEARROW);
      Expr();
                               cp.DoAddArrayItem(true);
      break;
    default:
      jj_la1[118] = jj_gen;
            cp.DoAddArrayItem(false);
    }
  }

  final public void ConstArrayBody() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case PLUS:
    case MINUS:
    case LCBRACKET:
    case NSSEPERATOR:
    case ARRAY:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case NOMBRE:
    case INTEGER:
      ConstArrayBodyItem();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_30;
        }
        if (jj_2_13(2147483647)) {
          jj_consume_token(CAMMA);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CAMMA:
            jj_consume_token(CAMMA);
            ConstArrayBodyItem();
            break;
          default:
            jj_la1[120] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
  }

  final public void ConstArrayBodyItem() throws ParseException, CompilationException {
    StaticConsts();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEARROW:
      jj_consume_token(DOUBLEARROW);
      StaticConsts();
                                       cp.doStaticConstArrayAddMapItem();
      break;
    default:
      jj_la1[122] = jj_gen;
            cp.doStaticConstArrayAddItem();
    }
  }

  final public void EchoStatement() throws ParseException, CompilationException {
    jj_consume_token(ECHO);
    Expr();
                    cp.DoEcho();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_31;
      }
      jj_consume_token(CAMMA);
      Expr();
                                                      cp.DoEcho();
    }
    jj_consume_token(EOL);
  }

  final public void ArgList() throws ParseException, CompilationException {
    int count = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PSTRING:
    case BEGIN_OF_SSTRING:
    case HEREDOC_ENTRY:
    case PLUS:
    case MINUS:
    case INC:
    case DEC:
    case NOT:
    case BITAND:
    case BITNOT:
    case LBRACKET:
    case LCBRACKET:
    case NSSEPERATOR:
    case INT_CAST:
    case FLOAT_CAST:
    case STRING_CAST:
    case ARRAY_CAST:
    case OBJECT_CAST:
    case BOOL_CAST:
    case UNSET_CAST:
    case ARRAY:
    case EMPTY:
    case INCLUDE:
    case INCLUDE_ONCE:
    case REQUIRE:
    case REQUIRE_ONCE:
    case EVAL:
    case ISSET:
    case STATIC:
    case NEW:
    case CLONE:
    case FUNCTION:
    case SILENT:
    case PRINT:
    case LIST:
    case EXIT:
    case NAMESPACE:
    case CLASS_C:
    case TRAIT_C:
    case FUNCTION_C:
    case METHOD_C:
    case LINE_C:
    case FILE_C:
    case DIR_C:
    case NAMESPACE_C:
    case IDENTIFIER:
    case VARIABLE:
    case DOLLAR:
    case NOMBRE:
    case INTEGER:
      Expr();
               cp.doArgItem();count++;
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[124] = jj_gen;
          break label_32;
        }
        jj_consume_token(CAMMA);
        Expr();
                                                             cp.doArgItem();count++;
      }
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
                                                                                              cp.DoPackArg(count);
  }

  final public void ObjectMember() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
                     cp.DoFindVariable(t.image,false);cp.DoToString();cp.DoRequestMember(false);
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      jj_consume_token(LBBRACKET);
      Expr();
      jj_consume_token(RBBRACKET);
                                                cp.DoFindVariableByName(false);cp.DoToString();cp.DoRequestMember(false);
      break;
    case MEMBERNAME:
      t = jj_consume_token(MEMBERNAME);
      if (jj_2_14(2147483647)) {
                                  cp.DoString(t.image);cp.DoRequestMember(true);
      } else {
            cp.DoString(t.image);cp.DoRequestMember(false);
      }
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForExpr() throws ParseException, CompilationException {
    Expr();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[127] = jj_gen;
        break label_33;
      }
      jj_consume_token(CAMMA);
      Expr();
    }
  }

  final public void InternalFunctions() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY:
      jj_consume_token(EMPTY);
      jj_consume_token(LBRACKET);
      AtomicExpr();
      jj_consume_token(RBRACKET);
                                                 cp.doIsEmpty();
      break;
    case INCLUDE:
      jj_consume_token(INCLUDE);
      Expr();
                         cp.doIncludeOrEval(0);
      break;
    case INCLUDE_ONCE:
      jj_consume_token(INCLUDE_ONCE);
      Expr();
                              cp.doIncludeOrEval(1);
      break;
    case REQUIRE:
      jj_consume_token(REQUIRE);
      Expr();
                         cp.doIncludeOrEval(2);
      break;
    case REQUIRE_ONCE:
      jj_consume_token(REQUIRE_ONCE);
      Expr();
                              cp.doIncludeOrEval(3);
      break;
    case EVAL:
      jj_consume_token(EVAL);
      jj_consume_token(LBRACKET);
      Expr();
      jj_consume_token(RBRACKET);
                                            cp.doIncludeOrEval(4);
      break;
    case ISSET:
      jj_consume_token(ISSET);
      jj_consume_token(LBRACKET);
      IsSetList();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IsSetList() throws ParseException, CompilationException {
    AtomicExpr();
                   cp.doIsSet();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAMMA:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_34;
      }
      jj_consume_token(CAMMA);
      AtomicExpr();
                                                            cp.doAdditionalIsSet();
    }
  }

  final public void FunctionDeclaration() throws ParseException, CompilationException {
    Token t;
    boolean ref = false;
    jj_consume_token(FUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
      jj_consume_token(BITAND);
                            ref = true;
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                                                               cp.doBeginFunctionDeclaration(t.image,ref);
    jj_consume_token(LBRACKET);
    ParametreList();
    jj_consume_token(RBRACKET);
    jj_consume_token(LBBRACKET);
    InnerStatementList();
    jj_consume_token(RBBRACKET);
                                                   cp.doEndFunction();
  }

  final public void ParametreList() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
    case NSSEPERATOR:
    case ARRAY:
    case NAMESPACE:
    case IDENTIFIER:
    case VARIABLE:
      ParametreListItem();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAMMA:
          ;
          break;
        default:
          jj_la1[131] = jj_gen;
          break label_35;
        }
        jj_consume_token(CAMMA);
        ParametreListItem();
      }
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
  }

  final public void ParametreListItem() throws ParseException, CompilationException {
    Token t;
    String typename = "";
    boolean is_ref = false;
    boolean hasDefault = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NSSEPERATOR:
    case ARRAY:
    case NAMESPACE:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAY:
        jj_consume_token(ARRAY);
                  typename = "array";
        break;
      case NSSEPERATOR:
      case NAMESPACE:
      case IDENTIFIER:
        FullyQualifiedClassName();
                                      typename = (String)$().data;
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BITAND:
      jj_consume_token(BITAND);
                   is_ref = true;
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    t = jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      StaticConsts();
                                                                                   hasDefault = true;
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
      cp.doFunctionParamItem(t.image,typename,is_ref,hasDefault);
  }

  final public void FullyQualifiedClassName() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      NameSpaceName();
      break;
    case NAMESPACE:
      jj_consume_token(NAMESPACE);
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
      break;
    case NSSEPERATOR:
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
      break;
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NameSpaceName() throws ParseException, CompilationException {
    Token t;
    StringBuilder sb = new StringBuilder();
    t = jj_consume_token(IDENTIFIER);
                       sb.append(t.image);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NSSEPERATOR:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_36;
      }
      jj_consume_token(NSSEPERATOR);
      t = jj_consume_token(IDENTIFIER);
                                                                                sb.append("\u005c\u005c" + t.image);
    }
                                                                                                                  P(new ZNode(ZNode.IS_CONST,sb.toString()));
  }

  final public void ClassName() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      NameSpaceName();
                      $(0).data = cp.getCurrentNameSpace() + $(0).data;
      break;
    case NAMESPACE:
      jj_consume_token(NAMESPACE);
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
                                                  $(0).data = cp.getCurrentNameSpace() + $(0).data;
      break;
    case NSSEPERATOR:
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassNameReference() throws ParseException, CompilationException {
    Token t;
    if (jj_2_15(2)) {
      ClassName();
                               cp.doFetchClass((String)$().data);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PSTRING:
      case BEGIN_OF_SSTRING:
      case HEREDOC_ENTRY:
      case LBRACKET:
      case LCBRACKET:
      case NSSEPERATOR:
      case ARRAY:
      case STATIC:
      case NEW:
      case FUNCTION:
      case NAMESPACE:
      case CLASS_C:
      case TRAIT_C:
      case FUNCTION_C:
      case METHOD_C:
      case LINE_C:
      case FILE_C:
      case DIR_C:
      case NAMESPACE_C:
      case IDENTIFIER:
      case VARIABLE:
      case DOLLAR:
      case NOMBRE:
      case INTEGER:
        Atom();
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StaticConsts() throws ParseException, CompilationException {
    if (jj_2_16(2)) {
      StaticConstant();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        NameSpaceName();
                        cp.doStaticConstFindConst((String)$().data);
        break;
      case NAMESPACE:
        jj_consume_token(NAMESPACE);
        jj_consume_token(NSSEPERATOR);
        NameSpaceName();
                                                  cp.doStaticConstFindConst(cp.getCurrentNameSpace() + (String)$().data);
        break;
      case NSSEPERATOR:
        jj_consume_token(NSSEPERATOR);
        NameSpaceName();
                                      cp.doStaticConstFindConst((String)$().data);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        StaticConsts();
                              cp.doStaticConstPosOptr();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        StaticConsts();
                               cp.doStaticConstNegOptr();
        break;
      case ARRAY:
        jj_consume_token(ARRAY);
        jj_consume_token(LBRACKET);
                           cp.doStaticConstArray();
        ConstArrayBody();
        jj_consume_token(RBRACKET);
        break;
      case LCBRACKET:
        jj_consume_token(LCBRACKET);
                    cp.doStaticConstArray();
        ConstArrayBody();
        jj_consume_token(RCBRACKET);
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StaticConstant() throws ParseException, CompilationException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMBRE:
      t = jj_consume_token(NOMBRE);
                   cp.doStaticConstFloat(Double.parseDouble(t.image));
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                      cp.doStaticConstInt(Integer.parseInt(t.image));
      break;
    case PSTRING:
      t = jj_consume_token(PSTRING);
                      cp.doStaticConstString(t.image);
      break;
    case BEGIN_OF_SSTRING:
      jj_consume_token(BEGIN_OF_SSTRING);
      t = jj_consume_token(OTHERS_IN_STRING);
      jj_consume_token(END_OF_STRING);
                                                                  cp.doStaticConstString(t.image);
      break;
    case CLASS_C:
      jj_consume_token(CLASS_C);
      break;
    case TRAIT_C:
      jj_consume_token(TRAIT_C);
      break;
    case FUNCTION_C:
      jj_consume_token(FUNCTION_C);
      break;
    case METHOD_C:
      jj_consume_token(METHOD_C);
      break;
    case LINE_C:
      jj_consume_token(LINE_C);
      break;
    case FILE_C:
      jj_consume_token(FILE_C);
      break;
    case DIR_C:
      jj_consume_token(DIR_C);
      break;
    case NAMESPACE_C:
      jj_consume_token(NAMESPACE_C);
                      cp.doStaticConstString(cp.getCurrentNameSpace());
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConstName() throws ParseException, CompilationException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      NameSpaceName();
                      $(0).data = cp.buildNameSpaceName((String)$(0).data);
      break;
    case NAMESPACE:
      jj_consume_token(NAMESPACE);
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
                                                  $(0).data = cp.getCurrentNameSpace() + $(0).data;
      break;
    case NSSEPERATOR:
      jj_consume_token(NSSEPERATOR);
      NameSpaceName();
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(LBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(BEGIN_OF_SSTRING)) return true;
    if (jj_scan_token(OTHERS_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(PSTRING)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(NAMESPACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NOMBRE)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(NSSEPERATOR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_scan_token(NSSEPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(BITAND)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(ISSET)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(EVAL)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(REQUIRE_ONCE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(REQUIRE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(EAR)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(INCLUDE_ONCE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(INCLUDE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(EMPTY)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(ASSIGNRSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(ASSIGNLSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(ASSIGNBITXOR)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(ASSIGNBITOR)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(ASSIGNBITAND)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(ASSIGNCONCAT)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(NSSEPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(ASSIGNMOD)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(ASSIGNDIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(ASSIGNTIMES)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(ASSIGNMINUS)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(ASSIGNPLUS)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(CAMMA)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_116()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(ECHO)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(NSSEPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(CAMMA)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(LBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(BITAND)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(INSTANCEOF)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(NAMESPACE_C)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(NOMBRE)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(PROPERTY_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(ARRAY_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(EXPR_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(VARVARIABLE_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(OTHERS_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(LBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(VARIABLE_IN_STRING)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(TRAIT)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(LBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(HEREDOC_ENTRY)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(TRY)) return true;
    if (jj_scan_token(LBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(BEGIN_OF_SSTRING)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_OF_STRING)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(PSTRING)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(DOUBLESLICE)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(DOUBLESLICE)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_204()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(LCBRACKET)) return true;
    if (jj_3R_187()) return true;
    if (jj_scan_token(RCBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(LBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LCBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(STATIC)) return true;
    Token xsp;
    if (jj_3R_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(UNSET_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(GLOBAL)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(BOOL_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(OBJECT_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(ARRAY_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(UNSET)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(STRING_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(INLINEHTML)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(FLOAT_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(INT_CAST)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    if (jj_3R_52()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(SILENT)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(CLONE)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(BITNOT)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(BITAND)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(DECLARE)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_95()) return true;
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LBBRACKET)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RBBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SLICE)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(NSSEPERATOR)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_scan_token(NSSEPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(NSSEPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(NAMESPACE_C)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JZendParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[144];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40080,0x0,0x0,0x0,0x40080,0x0,0x0,0x0,0x0,0x40080,0x0,0x40000,0x40000,0x40000,0x0,0x0,0x40000,0x40080,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40080,0x40080,0x40080,0x0,0x40000,0x0,0x40080,0x0,0x0,0x40080,0x40080,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40080,0x0,0x0,0x0,0x40000,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x40000,0x0,0x0,0x40000,0x0,0x40000,0x0,0x0,0x0,0x40000,0x11f000,0x91f000,0x91f000,0x11f000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x40000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x40000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf2900,0x2000,0x0,0x0,0xf2900,0x4000,0x0,0x0,0x0,0xf2900,0x4000,0xf2900,0xf2900,0xf2900,0x2000,0x0,0xf0900,0xfa900,0x4000,0x0,0x4000,0x4000,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0xfa900,0xfa900,0xfa900,0x4000,0xf0900,0x8000,0xf2900,0xa000,0xa000,0xf2900,0xfa900,0x0,0x0,0x900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x4000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x2000,0xf2900,0x0,0xff000000,0xff000000,0xf0900,0x4000,0xf0900,0xf0900,0x1000,0xf30000,0xf30000,0xc0000,0xc0000,0xf0900,0x0,0xf0900,0x0,0x0,0xf0900,0x0,0x900,0x0,0x0,0x0,0x900,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0xf0900,0x0,0x4000,0x4000,0x30100,0x0,0x4000,0x4000,0xf0900,0x0,0x4000,0x0,0x4000,0x0,0x4000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x900,0x30000,0x100,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x5498000,0x4000000,0x4000000,0x0,0x5498000,0x0,0x0,0x0,0x0,0x5498000,0x0,0x1498000,0x1498000,0x1498000,0x4000000,0x0,0x1498000,0x5498000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5498000,0x5498000,0x5498000,0x0,0x1498000,0x4000000,0x5498000,0x0,0x0,0x5498000,0x5498000,0x10000,0x10000,0x1410000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x4000000,0x5498000,0x0,0xf,0xf,0x1498000,0x0,0x1498000,0x1498000,0x0,0x377ff0,0x377ff0,0x80000000,0x80000000,0x1498000,0x400000,0x1c98000,0x400000,0x15400000,0x3498000,0x15400000,0x1400000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x400000,0x4000000,0x0,0x0,0x0,0x1498000,0x40000000,0x0,0x0,0x1000000,0x40000000,0x0,0x0,0x1498000,0x0,0x0,0x0,0x0,0x10000,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x1400000,0x1000000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xb2ac7ffd,0x0,0x0,0x0,0xb2ac7ffd,0x0,0x0,0x0,0x1,0xb2ac6ffd,0x0,0x800003fd,0x800003fd,0x800003fd,0x0,0x2400,0xb2ac4bfd,0xb2ac6ffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x10000,0x8000,0x10000,0xb2ac6ffd,0xb2ac6ffd,0xb2ac6ffd,0x0,0x800003fd,0x0,0xbeac6ffd,0x0,0x0,0xbeac6ffd,0xb2ac6ffd,0x0,0x0,0x201,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb2ac6ffd,0x0,0x0,0x0,0x800003fd,0x0,0x800003fd,0x800003fd,0x0,0x0,0x0,0x0,0x0,0x800003fd,0x0,0x800003fd,0x0,0x0,0x800003fd,0x0,0x201,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800003fd,0x0,0x0,0x0,0x201,0x0,0x0,0x0,0x800003fd,0x0,0x0,0x80000000,0x0,0x0,0x0,0x201,0x201,0x201,0x0,0x0,0x1,0x1,0x1,0x201,0x201,0x0,0x1,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0xea3fffbf,0x0,0x0,0x100000,0x2fffbf,0x0,0x40,0x40,0x0,0x2fefbf,0x0,0xbcebf,0xbcebf,0xbcebf,0x0,0x42100,0x2bcebf,0x2fefbf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2fefbf,0x2fefbf,0x2fefbf,0x0,0xbcebf,0x0,0xea2fefbf,0x0,0x0,0xea2fefbf,0x2fefbf,0x0,0x0,0x80a80,0x0,0x400000,0x80000,0xe2000000,0x4000000,0x10000000,0xea000000,0x0,0x4000000,0x0,0x61001880,0x61001880,0x61000080,0x1000000,0x61000080,0x0,0x0,0x800,0x0,0x0,0x80000,0x40,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0xea2fefbf,0xea000800,0x0,0x0,0xbcebf,0x0,0xbcebf,0xacebf,0x0,0x0,0x0,0x0,0x0,0xacebf,0x0,0xbcebf,0x0,0x0,0xbcebf,0x0,0x80a80,0x0,0x80080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0xe2000000,0x4000000,0x10000000,0xea000000,0x0,0x0,0x0,0x0,0x0,0xbcebf,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0xbcebf,0x0,0x0,0x3f,0x0,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x0,0x80000,0x0,0x80000,0x80a80,0x80000,0x0,0x80000,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x31ffd0,0x0,0x4000,0x0,0x31ffd0,0x0,0x0,0x0,0x4000,0x31ffd0,0x0,0x31ffc0,0x31ffc0,0x31ffc0,0x0,0x0,0x31ffd0,0x31ffd0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x31ffd0,0x31ffd0,0x31ffd0,0x0,0x31ffc0,0x0,0x31ffd0,0x0,0x0,0x31ffd0,0x31ffd0,0x0,0x0,0x31ffc0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8007,0x8007,0x7,0x1,0x7,0x0,0x0,0x8000,0x0,0x0,0x4000,0x0,0x4000,0x7,0x4000,0x4007,0x4000,0x0,0x0,0x0,0x0,0x31ffd0,0x0,0x0,0x0,0x31ffc0,0x0,0x31ffc0,0x31ffc0,0x0,0x0,0x0,0x0,0x0,0x31ffc0,0x0,0x31ffc0,0x0,0x0,0x31ffc0,0x0,0x31ffc0,0x0,0x307fc0,0xc000,0x0,0x0,0x0,0x0,0x0,0x303fc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x18000,0x0,0x0,0x31ffc0,0x0,0x0,0x0,0x307fc0,0x0,0x0,0x0,0x31ffc0,0x18000,0x0,0x0,0x0,0x0,0x0,0xc000,0x4000,0x4000,0x0,0x0,0x4000,0x0,0x4000,0x31ffc0,0x4000,0x303fc0,0x4000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JZendParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JZendParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JZendParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JZendParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JZendParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JZendParser(JZendParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JZendParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 144; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[182];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 144; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 182; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
