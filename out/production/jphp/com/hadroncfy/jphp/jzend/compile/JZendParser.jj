
options{
    STATIC = false;
    UNICODE_INPUT=true;
}
PARSER_BEGIN(JZendParser)

package com.hadroncfy.jphp.jzend.compile;

import java.util.Stack;


class JZendParser implements LineGetter{
    private JZendCompiler cp = null;
    private int[] state_stack = new int[10];
    private int sp = 0;
    private boolean in_string = false;
    private Stack<ZNode> node_stack = new Stack<ZNode>();
    public enum BinaryOptrPriorities{
        OR,
        AND,
        XOR,
        BITOR,
        BITAND,
        BITXOR,
        CONCAT,
        EQU,
        MT,
        SHIFT,
        PLUS,
        TIMES,
        MOD
    }
    public void Parse() throws TokenMgrError,ParseException,CompilationException{
        this.TopStatementList();
    }
    public void setCompiler(JZendCompiler c){
        this.cp = c;
    }
    private void PushState(int t){
        token_source.SwitchTo(t);
        state_stack[sp++] = t;
    }
    private void PopState(){
        token_source.SwitchTo(state_stack[--sp]);
    }
    private boolean IsEmpty(){
        return sp == 0;
    }
    private void SwitchTo(int a){
        token_source.SwitchTo(a);
    }
    private void P(ZNode n){
        node_stack.push(n);
    }
    private ZNode $(){
        return node_stack.pop();
    }
    private ZNode $(int i){
        return node_stack.get(node_stack.size() - i - 1);
    }
    public int getLine(){
        return token.beginLine;
    }
    public int getColumn(){
        return token.beginColumn;
    }
    protected static int getBinaryOptrPriority(int t){
        switch(t){
            case OR: return BinaryOptrPriorities.OR.ordinal();
            case AND: return BinaryOptrPriorities.AND.ordinal();
            case XOR: return BinaryOptrPriorities.XOR.ordinal();
            case BITOR: return BinaryOptrPriorities.BITOR.ordinal();
            case BITAND: return BinaryOptrPriorities.BITAND.ordinal();
            case BITXOR: return BinaryOptrPriorities.BITXOR.ordinal();
            case CONCAT: return BinaryOptrPriorities.CONCAT.ordinal();
            case MT:
            case LT:
            case MTOE:
            case LTOE: return BinaryOptrPriorities.MT.ordinal();
            case EQU:
            case NEQU:
            case IDENTICAL:
            case NIDENTICAL: return BinaryOptrPriorities.EQU.ordinal();
            case PLUS:
            case MINUS: return BinaryOptrPriorities.PLUS.ordinal();
            case TIMES:
            case DIVIDE: return BinaryOptrPriorities.TIMES.ordinal();
            case MOD: return BinaryOptrPriorities.MOD.ordinal();
            default: throw new RuntimeException("unknown operator:" + t);
        }
    }
}

PARSER_END(JZendParser)

<IN_SCRIPTING>
SKIP: {"\n"|"\r"|"\r\n"|"\t"|" "}

<DEFAULT>
SPECIAL_TOKEN:{
    < "<?php" > : IN_SCRIPTING
}

<DEFAULT>
TOKEN: {
    <INLINEHTML:(~[])>
}

<IN_LINECOMMENT>
SPECIAL_TOKEN: {
    <"\n"|"\r\n"> : IN_SCRIPTING
    | <"?>"> : DEFAULT
}

<IN_BLOCKCOMMENT>
SPECIAL_TOKEN: {
    <"*/"> : IN_SCRIPTING
}

<IN_LINECOMMENT,IN_BLOCKCOMMENT>
MORE: {
    <~[]>
}

<IN_DOUBLE_QUOTES,IN_BACK_QUOTES,IN_HEREDOC>
TOKEN: {
    <ARRAY_IN_STRING: "$" <NAME> "[" > { matchedToken.image = image.deleteCharAt(0).deleteCharAt(image.length() - 1).toString(); }
    | <PROPERTY_IN_STRING: "$" <NAME> "->" <NAME> >
    | <VARIABLE_IN_STRING: "$" <NAME> > { matchedToken.image = image.deleteCharAt(0).toString(); }
    | <VARVARIABLE_IN_STRING: "${">
    | <EXPR_IN_STRING: "{$">
    | <OTHERS_IN_STRING3: ["{","$"]> { matchedToken.kind = OTHERS_IN_STRING; }
}

<IN_SINGLE_QUOTES>
TOKEN: {
    <PSTRING: <SINGLE_QUOTES> > { matchedToken.image = image.deleteCharAt(image.length() - 1).toString(); } : IN_SCRIPTING
}

<IN_DOUBLE_QUOTES>
TOKEN: {
    <END_OF_STRING: <DOUBLE_QUOTES> > { matchedToken.kind = END_OF_STRING; } : IN_SCRIPTING
    | <OTHERS_IN_STRING: (~["{","$","\""]|"\\" ~[])+>
}

<IN_BACK_QUOTES>
TOKEN: {
    <END_OF_STRING2: <BACK_QUOTES> > { matchedToken.kind = END_OF_STRING; } : IN_SCRIPTING
    | <OTHERS_IN_STRING2: (~["{","$","`"]|"\\" ~[])+> { matchedToken.kind = OTHERS_IN_STRING; }
}

<IN_HEREDOC>
TOKEN: {
    <NAME_IN_HEREDOC: <NAME> >
    | <OTHERS_IN_HEREDOC: (~["a"-"z","A"-"Z","_","{","$"]|"\\" ~[])+ > { matchedToken.kind = OTHERS_IN_STRING; }
}

<IN_SINGLE_QUOTES,IN_BACK_QUOTES>
MORE: {
    <"\\" ~[]>
    | <~["\\"]>
}

<LOOKING_FOR_PROPERTY>
SPECIAL_TOKEN: {
    < [" ","\n","\r"]|"\r\n" >
}

<LOOKING_FOR_PROPERTY>
TOKEN: {
    <MEMBERNAME: <NAME> > : IN_SCRIPTING
    | <VARIABLE2: "$" <NAME> > { matchedToken.image = image.deleteCharAt(0).toString();matchedToken.kind = VARIABLE; } : IN_SCRIPTING
    | <DOLLAR2: "$"> { matchedToken.kind = DOLLAR; } : IN_SCRIPTING
    | <LBBRACKET2 : "{"> { matchedToken.kind = LBBRACKET; } : IN_SCRIPTING
}

<LOOKING_FOR_PROPERTY>
SPECIAL_TOKEN: {
    < <DOUBLE_QUOTES> > : IN_DOUBLE_QUOTES
    | < <SINGLE_QUOTES> > : IN_SINGLE_QUOTES
}

<IN_SCRIPTING>
SPECIAL_TOKEN: {
    <"//"|"#"> : IN_LINECOMMENT
    | <"/*"> : IN_BLOCKCOMMENT
    | < <SINGLE_QUOTES> > : IN_SINGLE_QUOTES
    | <#DOUBLE_QUOTES : "\"">
    | <#SINGLE_QUOTES : "'">
    | <#BACK_QUOTES: "`">
}

<IN_SCRIPTING>
TOKEN: {
    < BEGIN_OF_SSTRING: <DOUBLE_QUOTES> > : IN_DOUBLE_QUOTES
    | < BEGIN_OF_DSTRING: <BACK_QUOTES> > { matchedToken.kind = BEGIN_OF_SSTRING; } : IN_BACK_QUOTES
    | <EOS: "?>"> { matchedToken.kind = EOL; } : DEFAULT 
    | <HEREDOC_ENTRY: "<<<">
    | <EAR: "?">
    | <EOL: ";">
    | <CAMMA: ",">
    | <SLICE: ":">
    | <PLUS: "+">
    | <MINUS: "-">
    | <INC: "++">
    | <DEC: "--">
    | <TIMES: "*">
    | <DIVIDE: "/">
    | <CONCAT: ".">
    | <MOD: "%">
    | <ASSIGN: "=">
    | <ASSIGNPLUS: "+=">
    | <ASSIGNMINUS: "-=">
    | <ASSIGNTIMES: "*=">
    | <ASSIGNDIVIDE: "/=">
    | <ASSIGNMOD: "%=">
    | <ASSIGNCONCAT: ".=">
    | <ASSIGNBITAND: "&=">
    | <ASSIGNBITOR: "|=">
    | <ASSIGNBITXOR: "^=">
    | <ASSIGNLSHIFT: "<<=">
    | <ASSIGNRSHIFT: ">>=">
    | <MT: ">">
    | <LT: "<">
    | <MTOE: ">=">
    | <LTOE: "<=">
    | <EQU: "==">
    | <NEQU: "!=">
    | <IDENTICAL: "===">
    | <NIDENTICAL: "!=="|"<>">
    | <AND: "&&"|"and">
    | <OR: "||"|"or">
    | <XOR: "xor">
    | <NOT: "!">
    | <BITAND: "&">
    | <BITOR: "|">
    | <BITXOR: "^">
    | <BITNOT: "~">
    | <LSHIFT: "<<">
    | <RSHIFT: ">>">
    | <LBRACKET: "(">
    | <RBRACKET: ")">
    | <LCBRACKET: "[">
    | <RCBRACKET: "]">
    | <LBBRACKET: "{">
    | <RBBRACKET: "}">
    | <ARROW: "->"> : LOOKING_FOR_PROPERTY
    | <DOUBLESLICE: "::">
    | <DOUBLEARROW: "=>">
    | <INSTANCEOF: "instanceof">
    | <NSSEPERATOR: "\\">
}

<IN_SCRIPTING>
TOKEN: {
    <#TAB_AND_SPACES: (" "|"\t")*>
    | <INT_CAST: "(" <TAB_AND_SPACES> ("int"|"integer") <TAB_AND_SPACES> ")">
    | <FLOAT_CAST: "(" <TAB_AND_SPACES> ("real"|"float"|"double") <TAB_AND_SPACES> ")">
    | <STRING_CAST: "(" <TAB_AND_SPACES> ("string"|"binary") <TAB_AND_SPACES> ")">
    | <ARRAY_CAST: "(" <TAB_AND_SPACES> ("array") <TAB_AND_SPACES> ")">
    | <OBJECT_CAST: "(" <TAB_AND_SPACES> ("object") <TAB_AND_SPACES> ")">
    | <BOOL_CAST: "(" <TAB_AND_SPACES> ("bool"|"boolean") <TAB_AND_SPACES> ")">
    | <UNSET_CAST: "(" <TAB_AND_SPACES> ("unset") <TAB_AND_SPACES> ")">
    | <ARRAY: "array" >
    | <UNSET: "unset" >
}

<IN_SCRIPTING>
TOKEN: {
    <ECHO: "echo">
    | <CONST: "const">
    | <GOTO: "goto">
    | <IF: "if">
    | <ELSEIF: "elseif">
    | <ELSE: "else">
    | <ENDIF: "endif">
    | <WHILE: "while">
    | <DO : "do">
    | <ENDWHILE: "endwhile">
    | <FOR: "for">
    | <ENDFOR: "endfor">
    | <FOREACH: "foreach">
    | <ENDFOREACH: "endforeach">
    | <SWITCH: "switch">
    | <CASE: "case">
    | <DEFAULTL: "default">
    | <BREAK: "break">
    | <CONTINUE: "continue">
    | <ENDSWITCH: "endswitch">
    | <EMPTY: "empty">
    | <INCLUDE: "include">
    | <INCLUDE_ONCE: "include_once">
    | <REQUIRE: "require">
    | <REQUIRE_ONCE: "require_once">
    | <EVAL: "eval">
    | <ISSET: "isset">
    | <AS: "as">
    | <STATIC: "static">
    | <GLOBAL: "global">
    | <NEW: "new">
    | <CLONE: "clone">
    | <FUNCTION: "function">
    | <USE: "use">
    | <RETURN: "return">
    | <SILENT: "@">
    | <PRINT: "print">
    | <LIST: "list">
    | <EXIT: "exit"|"die">
    | <THROW: "throw">
    | <NAMESPACE: "namespace">
    | <HALT_COMPILER: "__halt_compiler">
    | <TRY: "try">
    | <CATCH: "catch">
    | <FINALLY: "finally">
    | <VAR: "var">
    //point important !!!
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <INTERFACE: "interface">
    | <IMPLEMENTS: "implements">
    | <FINAL: "final">
    | <ABSTRACT: "abstract">
    | <TRAIT: "trait">
    | <PUBLIC: "public">
    | <PROTECTED: "protected">
    | <PRIVATE: "private">
    | <INSTEADOF: "insteadof">
    | <DECLARE: "declare">
    | <ENDDECLARE: "enddeclare">
    //constants
    | <CLASS_C: "__CLASS__">
    | <TRAIT_C: "__TRAIT">
    | <FUNCTION_C: "__FUNCTION__">
    | <METHOD_C: "__METHOD__">
    | <LINE_C: "__LINE__">
    | <FILE_C: "__FILE">
    | <DIR_C: "__DIR__">
    | <NAMESPACE_C: "__NAMESPACE__">
}

<IN_SCRIPTING>
TOKEN :
{
    <IDENTIFIER: <NAME> >
    | <VARIABLE: "$" <NAME> > { matchedToken.image = image.deleteCharAt(0).toString(); }
    | <DOLLAR: "$">
    | <#NAME: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])*>
    | <#LETTER: [ "a"-"z", "A"-"Z" ] >
    | <#DIGIT: [ "0"-"9"] >
    | <NOMBRE: ((<DIGIT>)+ "." (<DIGIT>)*)|(<DIGIT>)* "." (<DIGIT>)+ >
    | <INTEGER: (<DIGIT>)+ >
//    | <SSTRING: "\"" ( ~["\""]|("\\" ~[] ) )* "\"" >
//    | <PSTRING: "'" ( ~["'"]|("\\" ~[]) )* "'" >
}


void TopStatementList()throws CompilationException:{}{
    ( TopStatement() )* <EOF>
}
void TopStatement()throws CompilationException:{
    boolean t;
}{
    LOOKAHEAD(3) FunctionDeclaration()
    | LOOKAHEAD(3) ClassDeclaration()
    | <HALT_COMPILER> <LBRACKET> <RBRACKET> <EOL>
    | LOOKAHEAD(2) <NAMESPACE>
    (
        ( NameSpaceName() { cp.DoEnterNameSpace((String)$().data); } (
            <EOL>
            | <LBBRACKET> TopStatementList() <RBBRACKET> { cp.DoLeaveNameSpace(); }
        )
    ) | <LBBRACKET> TopStatementList() <RBBRACKET> )
    | <USE> UseList() <EOL>
    | ConstDeclaration()
    | Statement()

}
void UseList()throws CompilationException:{}{
    UseListItem() ( <CAMMA> UseListItem() )*
}
void UseListItem()throws CompilationException:{
    Token t;
}{
    NameSpaceName() [ <AS> t = <IDENTIFIER> {  } ]
    | <NSSEPERATOR> NameSpaceName() [ <AS> t = <IDENTIFIER> {  } ]
}
void Statement()throws CompilationException:{
    Token t;
}{
    LOOKAHEAD(2) t = <IDENTIFIER> <SLICE> {  }
    | UntickedStatement()
}
void ConstDeclaration() throws CompilationException :{
    Token t;
}{
    <CONST> ConstDeclarationItem() (<CAMMA> ConstDeclarationItem() )* <EOL>
}
void ConstDeclarationItem()throws CompilationException:{
}{
    ConstName() <ASSIGN> StaticConsts() { cp.doDeclareConst((String)$().data); }
}
void UntickedStatement()throws CompilationException :{
    Token t;
}{
    <LBBRACKET> InnerStatementList() <RBBRACKET>
    | <EOL>
    | LOOKAHEAD (2) InlineHTML() { cp.DoEcho(); }
    | <GOTO> t = <IDENTIFIER> <EOL> {  }
    | <RETURN> (
        Expr() <EOL> { cp.DoReturnOrThrow(0); }
        | <EOL> { cp.DoNull();cp.DoReturnOrThrow(0); } )
    | <THROW> Expr() <EOL> { cp.DoReturnOrThrow(1); }
    | Unset()
    | GlobalDeclarations()
    | LOOKAHEAD(2) StaticDeclarations()
    | EchoStatement()
    | IfStatement()
    | WhileStatement()
    | DoWhileStatement()
    | ForStatement()
    | SwitchStatement()
    | ForEachStatement()
    | TryCatchStatement()
    | DeclareStatement()
    | <BREAK> ( <EOL> { cp.DoBreakOrContinue(0,false); } | Expr() <EOL> { cp.DoBreakOrContinue(0,true); } )
    | <CONTINUE> ( <EOL> { cp.DoBreakOrContinue(1,false); } | Expr() <EOL> { cp.DoBreakOrContinue(1,true); } )
    | Expr() <EOL> { cp.DoPop(); }
}

void DeclareStatement()throws CompilationException:{}{
    <DECLARE> <LBRACKET> DeclareList() <RBRACKET> (
        Statement()
        | <SLICE> InnerStatementList() <ENDDECLARE> <EOL>
    )
}
void DeclareList()throws CompilationException:{
}{
    DeclareListItem() ( <CAMMA> DeclareListItem() )*
}
void DeclareListItem()throws CompilationException:{
    Token t;
}{
    t = <IDENTIFIER> <ASSIGN> StaticConsts()
}
void InlineHTML() :{
    Token t;
    StringBuilder sb = new StringBuilder();
}{
    ( t = <INLINEHTML> { sb.append(t.image); } )+ { cp.DoString(sb.toString()); }
}
void Unset()throws CompilationException:{}{
    <UNSET> <LBRACKET> Expr() { cp.DoUnset(); } ( <CAMMA> Expr() { cp.DoUnset(); } )* <RBRACKET> <EOL>
}
void GlobalDeclarations()throws CompilationException:{}{
    <GLOBAL> GlobalDeclarationItem() ( <CAMMA> GlobalDeclarationItem() )* <EOL>
}
void GlobalDeclarationItem()throws CompilationException:{
    Token t;
}{
    t = <VARIABLE> { cp.DoGlobal(t.image); } [ <ASSIGN> { cp.DoFindVariable(t.image,true); } Expr() { cp.doAssign(false); } ]
}
void StaticDeclarations()throws CompilationException:{}{
    <STATIC> ( StaticDeclarationItem() )+ <EOL>
}
void StaticDeclarationItem()throws CompilationException:{
    Token t;
}{
    t = <VARIABLE> [ <ASSIGN> Expr() ] { }
}
void IfStatement()throws CompilationException :{}{
    <IF> <LBRACKET> Expr() { cp.DoBeginIfStatement(); } <RBRACKET> (
        <SLICE> InnerStatementList() (
            <ELSEIF> { cp.DoEndIfBlock(); }
            <LBRACKET> Expr() <RBRACKET> { cp.DoElseIfBlock(); }
            <SLICE> InnerStatementList()
        )* [ <ELSE> { cp.DoEndIfBlock(); } <SLICE> InnerStatementList() ] <ENDIF> <EOL> { cp.DoEndIfStatement(); }
        | Statement() (
            <ELSEIF> { cp.DoEndIfBlock(); }
            <LBRACKET> Expr() <RBRACKET> { cp.DoElseIfBlock(); }
            Statement()
        )* [ <ELSE> { cp.DoEndIfBlock(); } Statement() ] { cp.DoEndIfStatement(); }
    )
}
void WhileStatement()throws CompilationException:{}{
    <WHILE> { cp.DoWhileStatement(0); } <LBRACKET> Expr() { cp.DoWhileStatement(1); } <RBRACKET> (
        <SLICE> InnerStatementList() <ENDWHILE> <EOL> { cp.DoWhileStatement(2); }
        | Statement() { cp.DoWhileStatement(2); }
    )
}
void DoWhileStatement() throws CompilationException:{}{
    <DO> { cp.DoDoWhileStatement(0); } Statement() <WHILE> <LBRACKET> { cp.DoDoWhileStatement(1); } Expr() <RBRACKET> <EOL> { cp.DoDoWhileStatement(2); }
}
void ForStatement()throws CompilationException:{}{
    <FOR> <LBRACKET> (
        ForExprList() <EOL> { cp.DoForStatement(0); }
        ForExprList() <EOL> { cp.DoForStatement(1); }
        ForExprList() <RBRACKET> { cp.DoForStatement(2); }
    )(
        <SLICE> InnerStatementList() <ENDFOR> <EOL> { cp.DoForStatement(3); }
        | Statement() { cp.DoForStatement(3); }
    )
}
void ForExprList()throws CompilationException:{}{
    [ Expr() ( <CAMMA> { cp.DoPop(); } Expr() )* ]
}
void SwitchStatement()throws CompilationException:{}{
    <SWITCH> <LBRACKET> { cp.DoSwitchStatement(0); } Expr() { cp.DoSwitchStatement(1); } <RBRACKET> (
        <SLICE> SwitchBody() <ENDSWITCH> <EOL> { cp.DoSwitchStatement(2); }
        | <LBBRACKET> SwitchBody() <RBBRACKET> { cp.DoSwitchStatement(2); }
    )
}
void SwitchBody()throws CompilationException:{}{
    ( SwitchBodyStatement() )+
}
void SwitchBodyStatement()throws CompilationException:{}{
    <CASE> { { cp.DoSwitchLabel(0); } } Expr() { cp.DoSwitchLabel(1); } ( <SLICE> | <EOL> )
    | <DEFAULTL> ( <SLICE> | <EOL> ) { cp.DoSwitchLabel(2); }
    | InnerStatement()
}
void ForEachStatement() throws CompilationException:{}{
    <FOREACH> <LBRACKET> Expr() { cp.doForEachStatement(0); } <AS> ForEachExpr() <RBRACKET> (
        <SLICE> InnerStatementList() <ENDFOREACH> <EOL> { cp.doForEachStatement(1); }
        | Statement() { cp.doForEachStatement(1); }
    )
}
void ForEachExpr() throws CompilationException:{
    boolean r1 = false,r2 = false;
}{
    [ <BITAND> { r1 = true; } ] AtomicExpr() { cp.doForEachFirstExpr(r1); } [
        <DOUBLEARROW> [ [ <BITAND> { r2 = true; } ] AtomicExpr() ] { cp.doForEachSecondExpr(r2); }
    ]
}
void TryCatchStatement()throws CompilationException:{}{
    <TRY> <LBBRACKET> { cp.DoBeginTry(); } InnerStatementList() <RBBRACKET>
    CatchItem(true) ( CatchItem(false) )* { cp.DoEndTryCatchBlock(); }
}
void CatchItem(boolean is_first)throws CompilationException:{
    Token t;
    String typename = "";
}{
    <CATCH> <LBRACKET> [ ClassName() { typename = (String)$().data; } ] t = <VARIABLE> <RBRACKET>
     <LBBRACKET> { cp.DoCatchBlock(is_first,t.image,typename); } InnerStatementList() <RBBRACKET>
}
void ClassDeclaration()throws CompilationException:{
    Token t;
}{
    (
        <CLASS> {  }
        | <ABSTRACT> <CLASS> {  }
        | <TRAIT> {  }
        | <FINAL> <CLASS> {  }
    ) t = <IDENTIFIER> {  }
    [ <EXTENDS> FullyQualifiedClassName() {  } ]
    [ <IMPLEMENTS> ImplementList() {  } ]
    <LBBRACKET> ClassBody() <RBBRACKET>
    | <INTERFACE> t = <IDENTIFIER> {  }
    InterfaceExtendList()
    <LBBRACKET> ClassBody() <RBBRACKET>
}
void ImplementList()throws CompilationException:{}{
    FullyQualifiedClassName() ( <CAMMA> FullyQualifiedClassName() )*
}
void InterfaceExtendList()throws CompilationException:{}{
    [ <EXTENDS> InterfaceList() ]
}
void InterfaceList()throws CompilationException:{}{
    FullyQualifiedClassName() ( <CAMMA> FullyQualifiedClassName() )*
}
void ClassBody()throws CompilationException:{}{
    ( MemberDecl() | TraitUseStatement() )*
}
void MemberDecl()throws CompilationException:{
    Token t;
}{
    (
        ( <PUBLIC> | <VAR> )
        | <PROTECTED> { }
        | <PRIVATE> {  }
        | <STATIC> {  }
        | <ABSTRACT> {  }
        | <FINAL> {  }
    )* (
        VariableMember() ( <CAMMA> VariableMember() )* <EOL>
        | ConstMember() ( <CAMMA> ConstMember() )* <EOL>
        | MethodMember()
    )
}
void TraitUseStatement()throws CompilationException:{}{
    <USE> TraitList() TraitAdaptations()
}
void TraitList()throws CompilationException:{}{
    FullyQualifiedClassName() ( <CAMMA> FullyQualifiedClassName() )*
}
void TraitAdaptations()throws CompilationException:{}{
    <EOL>
    | <LBBRACKET> TraitAdaptationList() <RBBRACKET>
}
void TraitAdaptationList()throws CompilationException:{}{
    (
        LOOKAHEAD( <NAMESPACE> | <NSSEPERATOR> | <IDENTIFIER> <NSSEPERATOR> ) TraitMethodReferenceFullyQualified() (
            <INSTANCEOF> TraitList() <EOL>
            | <AS> TraitAliasItem() <EOL>
        )
        | TraitMethodReference() <AS> TraitAliasItem() <EOL>
    )*
}
void TraitAliasItem()throws CompilationException:{
    Token t;
}{
    (
        <PUBLIC> {  }
        | <PROTECTED>  { }
        | <PRIVATE> {  }
    ) [ t = <IDENTIFIER> {  } ]
    | t = <IDENTIFIER> { }
}
void TraitMethodReferenceFullyQualified()throws CompilationException:{
    Token t;
}{
    FullyQualifiedClassName() <DOUBLESLICE> t = <IDENTIFIER> {  }
}

void TraitMethodReference()throws CompilationException:{
    Token t;
}{
    LOOKAHEAD( <NAMESPACE> | <NSSEPERATOR> | <IDENTIFIER> <NSSEPERATOR> ) TraitMethodReferenceFullyQualified()
    | t = <IDENTIFIER> {  }
}
void VariableMember()throws CompilationException:{
    Token t;
}{
    t = <VARIABLE> [ <ASSIGN> Expr() ] {  }
}
void ConstMember()throws CompilationException:{
    Token t;
}{
    <CONST> t = <IDENTIFIER> [ <ASSIGN> Expr() ] {  }
}
void MethodMember()throws CompilationException:{
    Token t;
}{
    <FUNCTION> {  } [ <BITAND> {  } ] t = <IDENTIFIER> <LBRACKET> ParametreList() <RBRACKET> (<EOL> | ScopeUseList() <LBBRACKET> InnerStatementList() <RBBRACKET>)
}
void InnerStatementList()throws CompilationException:{}{
    ( InnerStatement() )*
}
void InnerStatement() throws CompilationException:{}{
    LOOKAHEAD(2) Statement()
    | FunctionDeclaration()
    | ClassDeclaration()
}

void Expr() throws CompilationException:{}{
    <LIST> <LBRACKET> AssignmentList() <RBRACKET> <ASSIGN> Expr() { cp.doAssign(true); }
    | ConditionalExpr() [
        <ASSIGN> { cp.convertRvalueToLvalue(); } Expr() { cp.doAssign(false); }
        | <ASSIGNPLUS> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr() { cp.DoBinaryOptr(PLUS);cp.doAssign(false); }
        | <ASSIGNMINUS> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr() { cp.DoBinaryOptr(MINUS);cp.doAssign(false); }
        | <ASSIGNTIMES> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(TIMES);cp.doAssign(false); }
        | <ASSIGNDIVIDE> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(DIVIDE);cp.doAssign(false); }
        | <ASSIGNMOD> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(MOD);cp.doAssign(false); }
        | <ASSIGNCONCAT> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(CONCAT);cp.doAssign(false); }
        | <ASSIGNBITAND> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(BITAND);cp.doAssign(false); }
        | <ASSIGNBITOR> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(BITOR);cp.doAssign(false); }
        | <ASSIGNBITXOR> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(BITXOR);cp.doAssign(false); }
        | <ASSIGNLSHIFT> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(LSHIFT);cp.doAssign(false); }
        | <ASSIGNRSHIFT> { cp.convertRvalueToLvalue();cp.DoDup();cp.DoDereference(); } Expr(){ cp.DoBinaryOptr(RSHIFT);cp.doAssign(false); }
    ]
}
void AssignmentList()throws CompilationException:{}{
    { cp.DoNewArray(); } AssignmentListItem() ( <CAMMA> AssignmentListItem() )*
}
void AssignmentListItem()throws CompilationException:{}{
    UnaryExpr() { cp.convertRvalueToLvalue();cp.DoAddArrayItem(false); }
    | <LIST> AssignmentList()
    | { cp.DoNull();cp.DoAddArrayItem(false); }
}
void ConditionalExpr() throws CompilationException:{}{
    BinaryExpr() [
        <EAR> { cp.DoConditionalExpr(0); } [ BinaryExpr() ] { cp.DoConditionalExpr(1); } <SLICE> ConditionalExpr() { cp.DoConditionalExpr(2); }
    ]
}

void BinaryExpr()throws CompilationException :{
    Token t;
    Stack<Token> ts = null;
}
{
    UnaryExpr() (
        ( t = <OR>
        | t = <AND>
        | t = <XOR>
        | t = <BITOR>
        | t = <BITXOR>
        | t = <BITAND>
        | t = <EQU>
        | t = <NEQU>
        | t = <IDENTICAL>
        | t = <NIDENTICAL>
        | t = <MT>
        | t = <LT>
        | t = <MTOE>
        | t = <LTOE>
        | t = <LSHIFT>
        | t = <RSHIFT>
        | t = <PLUS>
        | t = <MINUS>
        | t = <CONCAT>
        | t = <TIMES>
        | t = <DIVIDE>
        | t = <MOD> ) {
            ts = new Stack<Token>();
            int p1 = getBinaryOptrPriority(t.kind);
            if(ts.empty()){
                ts.push(t);
            }
            else if(p1 >= getBinaryOptrPriority(ts.peek().kind)){
                ts.push(t);
            }
            else{
                Token t2;
                while(!ts.empty() && p1 < getBinaryOptrPriority(ts.peek().kind)){
                    t2 = ts.pop();
                    cp.DoBinaryOptr(t2.kind);
                }
                ts.push(t);
            }
        }
    UnaryExpr() )* {
        while(ts != null && !ts.empty()){
            cp.DoBinaryOptr(ts.pop().kind);
        }
    }
}


/*
void BinaryExpr() :
{}
{
  AndExpr() ( <OR> AndExpr() )*
}

void AndExpr() :
{}
{
  OrExpr() ( <AND> OrExpr() )*
}

void OrExpr():
{}
{
  BitOrExpr() ( <BITOR> BitOrExpr() )*
}

void BitOrExpr() :
{}
{
  BitAndExpr() ( <BITXOR> BitAndExpr()  )*
}

void BitAndExpr() :
{}
{
  EquExpr() ( <BITAND> EquExpr() )*
}

void EquExpr():
{}
{
  RelationalExpr() (
    <EQU> RelationalExpr()
    | <NEQU> RelationalExpr()
    | <IDENTICAL> RelationalExpr()
    | <NIDENTICAL> RelationalExpr()
  )*
}

void RelationalExpr():
{}
{
  ShiftExpr() (
    <MT> ShiftExpr()
    | <LT> ShiftExpr()
    | <MTOE> ShiftExpr()
    | <LTOE> ShiftExpr()
  )*
}

void ShiftExpr():
{}
{
  AdditiveExpr() (
    <LSHIFT> AdditiveExpr()
    | <RSHIFT> AdditiveExpr()
  )*
}

void AdditiveExpr():
{}
{
  MultiplicativeExpr() (
    <PLUS> MultiplicativeExpr()
    | <MINUS> MultiplicativeExpr()
    | <CONCAT> MultiplicativeExpr()
  )*
}

void MultiplicativeExpr():
{}
{
  UnaryExpr() (
    <TIMES> UnaryExpr()
    | <DIVIDE> UnaryExpr()
    | <MOD> UnaryExpr()
  )*
}
*/
void UnaryExpr()throws CompilationException :{}{
     <PLUS> UnaryExpr()
    | <MINUS> UnaryExpr() { cp.DoUnaryOptr(MINUS); }
    | <INC> UnaryExpr() { cp.convertRvalueToLvalue();cp.DoUnaryOptr(INC); }
    | <DEC> UnaryExpr() { cp.convertRvalueToLvalue();cp.DoUnaryOptr(DEC); }
    | <NOT> UnaryExpr() { cp.DoUnaryOptr(NOT); }
    | <BITAND> UnaryExpr() { cp.DoReference(); }
    | <BITNOT> UnaryExpr() { cp.DoUnaryOptr(BITNOT); }
    | <CLONE> UnaryExpr() { cp.DoUnaryOptr(CLONE); }
    | <SILENT> { cp.doBeginSilent(); } UnaryExpr() { cp.doEndSilent(); }
    | <PRINT> UnaryExpr() { cp.DoPrint(); }
    | <EXIT> ExitExpr() { cp.DoExit(); }
    | <INT_CAST> UnaryExpr() { cp.doCast(0); }
    | <FLOAT_CAST> UnaryExpr() { cp.doCast(1); }
    | <STRING_CAST> UnaryExpr() { cp.doCast(2); }
    | <ARRAY_CAST> UnaryExpr() { cp.doCast(3); }
    | <OBJECT_CAST> UnaryExpr() { cp.doCast(4); }
    | <BOOL_CAST> UnaryExpr() { cp.doCast(5); }
    | <UNSET_CAST> UnaryExpr() { cp.doCast(6); }
    | AtomicExpr() [ <INC> { cp.convertRvalueToLvalue();cp.DoPostIncOrDec(false); } | <DEC> { cp.convertRvalueToLvalue();cp.DoPostIncOrDec(true); } | <INSTANCEOF> ClassNameReference() { cp.DoFindClass((String)$().data);cp.DoInstanceOf(); } ]
    | InternalFunctions()
}

void NewExpr()throws CompilationException:{
    Token t;
}{
    ClassNameReference() (
        <LBRACKET> ArgList() <RBRACKET>
        | { cp.DoPackArg(0); }
    )
}

void ExitExpr()throws CompilationException:{}{
    <LBRACKET> ( Expr() <RBRACKET> | <RBRACKET> { cp.DoNombre(0,true); } )
    | { cp.DoNombre(0,true); }
}

void AtomicExpr()throws CompilationException:{}{
    Atom() ( Trailer() )*
}
void Trailer()throws CompilationException :{
    Token t;
}{
    <LBRACKET> ArgList() <RBRACKET> { cp.DoFunctionCall(); }
    | <LCBRACKET> (
        Expr() <RCBRACKET> { cp.DoSubscript(false); }
        | <RCBRACKET> { cp.DoSubscript(true); }
    )
    | <LBBRACKET> Expr() <RBBRACKET> { cp.DoSubscript(false); }
    | <ARROW> ObjectMember()
}

void Atom()throws CompilationException :{
    Token t;
}{
    Variable()
    | ClassMemberAndConst()
    | String()
    | <LBRACKET> Expr() <RBRACKET>
    | <ARRAY> <LBRACKET> { cp.DoNewArray(); } ArrayBody() <RBRACKET>
    | <LCBRACKET> { cp.DoNewArray(); } ArrayBody() <RCBRACKET>
    | AnonymousFunction()
    | <NEW> NewExpr() { cp.DoNew(); }
//    | AnonymousClass()
}
void ClassMemberAndConst() throws CompilationException:{
    boolean hasmember = false;
}{
    ConstName() [ <DOUBLESLICE> { cp.doFetchClass((String)$().data);hasmember = true; } ClassMember() { hasmember = true; } ] (
        LOOKAHEAD( <LBRACKET> ) { if(!hasmember)cp.DoFindFunction((String)$().data); }
        | { if(!hasmember)cp.doFindConst((String)$().data,false); }
    )
    | <STATIC> { cp.doFetchClass("static"); } <DOUBLESLICE> ClassMember()
    | Constant()
}
void ClassMember() throws CompilationException:{
    Token t;
}{
    t = <VARIABLE> { cp.DoString(t.image);cp.doFindClassVar(false); }
    | t = <IDENTIFIER> (
        LOOKAHEAD( <LBRACKET> ) { cp.doFindClassFunction(t.image); }
        | { cp.doFindClassConst(t.image); }
    )
}
void String()throws CompilationException:{
    Token t;
}{
    SString()
    | ( t = <PSTRING> ) { cp.DoString(t.image); }
    | HereDoc()
}

void SString()throws CompilationException:{
    Token t;
    int count = 0;
}{
    <BEGIN_OF_SSTRING> ( EcapedVar() { count++; } )* <END_OF_STRING> { if(count == 0) cp.DoString(""); else if(count > 1) cp.DoConcat(count); }
}
void HereDoc()throws CompilationException:{
    int count = 0;
    Token t;
    String start;
}{
    <HEREDOC_ENTRY> t = <IDENTIFIER> { start = t.image;SwitchTo(IN_HEREDOC); }
    ( EcapedVar() { count++; } | t = <NAME_IN_HEREDOC> {
        if(start.equals(t.image)){
            SwitchTo(IN_SCRIPTING);
            cp.DoConcat(count);
            return;
        }
        else {
            cp.DoString(t.image);
            count++;
        }
    })+
}
void EcapedVar()throws CompilationException:{
    Token t;
    int s;
}{
    t = <VARIABLE_IN_STRING> { cp.DoFindVariable(t.image,false);cp.DoToString(); }
    | t = <OTHERS_IN_STRING> { cp.DoString(t.image); }
    | <VARVARIABLE_IN_STRING> { s = token_source.curLexState;SwitchTo(IN_SCRIPTING); } Expr() <RBBRACKET> { SwitchTo(s);cp.DoFindVariableByName(false);cp.DoToString(); }
    | <EXPR_IN_STRING> { s = token_source.curLexState;SwitchTo(IN_SCRIPTING); } Expr() <RBBRACKET> { SwitchTo(s);cp.DoToString(); }
    | t = <ARRAY_IN_STRING> { cp.DoFindVariable(t.image,false);s = token_source.curLexState;SwitchTo(IN_SCRIPTING); } Expr() <RCBRACKET> { SwitchTo(s);cp.DoSubscript(false);cp.DoToString(); }
    | t = <PROPERTY_IN_STRING> {
        int a = t.image.lastIndexOf("->");
        int b = t.image.length();
        String vname = t.image.substring(1,a);
        String property = t.image.substring(a + 2,b - 1);
        cp.DoFindVariable(vname,false);
        cp.DoString(property);
        cp.DoRequestMember(false);
        cp.DoToString();
    }
}
void Constant()throws CompilationException:{
    Token t;
}{
    t = <NOMBRE> { cp.DoNombre(Double.parseDouble(t.image),false); }
    | t = <INTEGER> { cp.DoNombre(Integer.parseInt(t.image),true); }
    | <CLASS_C>
    | <TRAIT_C>
    | <FUNCTION_C>
    | <METHOD_C>
    | <LINE_C>
    | <FILE_C>
    | <DIR_C>
    | <NAMESPACE_C> { cp.DoString(cp.getCurrentNameSpace()); }
}
void AnonymousFunction()throws CompilationException:{
    Token t;
}{
    <FUNCTION> {  } [ <BITAND> {  } ] <LBRACKET> ParametreList() <RBRACKET> ScopeUseList() <LBBRACKET> InnerStatementList() <RBBRACKET>
}
void ScopeUseList()throws CompilationException:{}{
    [ <USE> <LBRACKET> ScopeUseListItem() ( <CAMMA> ScopeUseListItem() )* <RBRACKET>  ]
}
void ScopeUseListItem()throws CompilationException:{
    Token t;
    boolean is_ref = false;
}{
    [ <BITAND> { is_ref = true; } ] t = <VARIABLE> { cp.doFunctionUse(t.image,is_ref); }
}
void AnonymousClass()throws CompilationException:{}{
    (
        <CLASS> { }
        | <ABSTRACT> <CLASS> {  }
        | <TRAIT> {  }
        | <FINAL> <CLASS> {  }
    ) AnonymousClassArgList()
    [ <EXTENDS> FullyQualifiedClassName() {  } ]
    [ <IMPLEMENTS> ImplementList() {  } ]
    <LBBRACKET> ClassBody() <RBBRACKET>
    | <INTERFACE> AnonymousClassArgList()
    InterfaceExtendList()
    <LBBRACKET> ClassBody() <RBBRACKET>
}
void AnonymousClassArgList()throws CompilationException:{}{
    [ <LBRACKET> ArgList() <RBRACKET> ]
}
void Variable()throws CompilationException:{
    Token t;
}{
    t = <VARIABLE> { cp.DoFindVariable(t.image,false); }
    | <DOLLAR> (
        t = <VARIABLE> { cp.DoFindVariable(t.image,false);cp.DoFindVariableByName(false); }
        | <LBBRACKET> Expr() <RBBRACKET> { cp.DoFindVariableByName(false); }
    )
}

void ArrayBody()throws CompilationException:{}{
    [ ArrayBodyItem() (
        LOOKAHEAD( <CAMMA> <RBRACKET> ) <CAMMA>
        | <CAMMA> ArrayBodyItem()
    )* ]
}

void ArrayBodyItem() throws CompilationException:{}{
    Expr() (
        <DOUBLEARROW> Expr() { cp.DoAddArrayItem(true); }
        | { cp.DoAddArrayItem(false); }
    )
}

void ConstArrayBody()throws CompilationException:{}{
    [ ConstArrayBodyItem() (
        LOOKAHEAD( <CAMMA> <RBRACKET> ) <CAMMA>
        | <CAMMA> ConstArrayBodyItem()
    )* ]
}

void ConstArrayBodyItem()throws CompilationException:{}{
    StaticConsts() (
        <DOUBLEARROW> StaticConsts() { cp.doStaticConstArrayAddMapItem(); }
        | { cp.doStaticConstArrayAddItem(); }
    )
}

void EchoStatement() throws CompilationException:{}{
    <ECHO> Expr() { cp.DoEcho(); } ( <CAMMA> Expr() { cp.DoEcho(); } )* <EOL>
}

void ArgList()throws CompilationException:{
    int count = 0;
}{
    [ Expr() { cp.doArgItem();count++; } ( <CAMMA>  Expr() { cp.doArgItem();count++; } )* ] { cp.DoPackArg(count); }
}

void ObjectMember()throws CompilationException:{
    Token t;
}{
    t = <VARIABLE> { cp.DoFindVariable(t.image,false);cp.DoToString();cp.DoRequestMember(false);  }
    | <DOLLAR> <LBBRACKET> Expr() <RBBRACKET> { cp.DoFindVariableByName(false);cp.DoToString();cp.DoRequestMember(false);  }
    | t = <MEMBERNAME> (
        LOOKAHEAD( <LBRACKET> ) { cp.DoString(t.image);cp.DoRequestMember(true); }
        | { cp.DoString(t.image);cp.DoRequestMember(false); }
    )
}
void ForExpr()throws CompilationException:{}{
    Expr() ( <CAMMA> Expr() )*
}
void InternalFunctions()throws CompilationException:{}{
    <EMPTY> <LBRACKET> AtomicExpr() <RBRACKET> { cp.doIsEmpty(); }
    | <INCLUDE> Expr() { cp.doIncludeOrEval(0); }
    | <INCLUDE_ONCE> Expr() { cp.doIncludeOrEval(1); }
    | <REQUIRE> Expr() { cp.doIncludeOrEval(2); }
    | <REQUIRE_ONCE> Expr() { cp.doIncludeOrEval(3); }
    | <EVAL> <LBRACKET> Expr() <RBRACKET> { cp.doIncludeOrEval(4); }
    | <ISSET> <LBRACKET> IsSetList() <RBRACKET>
}
void IsSetList() throws CompilationException:{}{
    AtomicExpr() { cp.doIsSet(); } ( <CAMMA> AtomicExpr() { cp.doAdditionalIsSet(); } )*
}
void FunctionDeclaration()throws CompilationException:{
    Token t;
    boolean ref = false;
}{
    <FUNCTION> [ <BITAND> { ref = true; } ] t = <IDENTIFIER> { cp.doBeginFunctionDeclaration(t.image,ref); }
    <LBRACKET> ParametreList() <RBRACKET>
    <LBBRACKET> InnerStatementList() <RBBRACKET> { cp.doEndFunction(); }
}
void ParametreList()throws CompilationException:{}{
    [ ParametreListItem() ( <CAMMA> ParametreListItem() )* ]
}
void ParametreListItem()throws CompilationException:{
    Token t;
    String typename = "";
    boolean is_ref = false;
    boolean hasDefault = false;
}{
    [
        <ARRAY> { typename = "array"; }
        | FullyQualifiedClassName() { typename = (String)$().data; }
    ] [ <BITAND> { is_ref = true;  } ] t = <VARIABLE>  [ <ASSIGN> StaticConsts() { hasDefault = true;  } ]
    { cp.doFunctionParamItem(t.image,typename,is_ref,hasDefault); }
}
void FullyQualifiedClassName() throws CompilationException:{}{
    NameSpaceName()
    | <NAMESPACE> <NSSEPERATOR> NameSpaceName()
    | <NSSEPERATOR> NameSpaceName()
}
void NameSpaceName()throws CompilationException:{
    Token t;
    StringBuilder sb = new StringBuilder();
}{
    t = <IDENTIFIER> { sb.append(t.image); } ( <NSSEPERATOR> t = <IDENTIFIER> { sb.append("\\" + t.image); } )* { P(new ZNode(ZNode.IS_CONST,sb.toString())); }
}
void ClassName() throws CompilationException:{}{
    NameSpaceName() { $(0).data = cp.getCurrentNameSpace() + $(0).data; }
    | <NAMESPACE> <NSSEPERATOR> NameSpaceName() { $(0).data = cp.getCurrentNameSpace() + $(0).data; }
    | <NSSEPERATOR> NameSpaceName()
}
void ClassNameReference() throws CompilationException:{
    Token t;
}{
    LOOKAHEAD(2) ClassName() { cp.doFetchClass((String)$().data); }
    | Atom()
}
void StaticConsts() throws CompilationException:{}{
    LOOKAHEAD(2) StaticConstant()
    | NameSpaceName() { cp.doStaticConstFindConst((String)$().data); }
    | <NAMESPACE> <NSSEPERATOR> NameSpaceName() { cp.doStaticConstFindConst(cp.getCurrentNameSpace() + (String)$().data); }
    | <NSSEPERATOR> NameSpaceName() { cp.doStaticConstFindConst((String)$().data); }
    | <PLUS> StaticConsts() { cp.doStaticConstPosOptr(); }
    | <MINUS> StaticConsts() { cp.doStaticConstNegOptr(); }
    | <ARRAY> <LBRACKET> { cp.doStaticConstArray(); } ConstArrayBody() <RBRACKET>
    | <LCBRACKET> { cp.doStaticConstArray(); } ConstArrayBody() <RCBRACKET>
}

void StaticConstant()throws CompilationException:{
    Token t;
}{
    t = <NOMBRE> { cp.doStaticConstFloat(Double.parseDouble(t.image)); }
    | t = <INTEGER> { cp.doStaticConstInt(Integer.parseInt(t.image)); }
    | t = <PSTRING> { cp.doStaticConstString(t.image); }
    | <BEGIN_OF_SSTRING> t = <OTHERS_IN_STRING> <END_OF_STRING> { cp.doStaticConstString(t.image); }
    | <CLASS_C>
    | <TRAIT_C>
    | <FUNCTION_C>
    | <METHOD_C>
    | <LINE_C>
    | <FILE_C>
    | <DIR_C>
    | <NAMESPACE_C> { cp.doStaticConstString(cp.getCurrentNameSpace()); }
}
void ConstName() throws CompilationException:{}{
    NameSpaceName() { $(0).data = cp.buildNameSpaceName((String)$(0).data); }
    | <NAMESPACE> <NSSEPERATOR> NameSpaceName() { $(0).data = cp.getCurrentNameSpace() + $(0).data; }
    | <NSSEPERATOR> NameSpaceName()
}